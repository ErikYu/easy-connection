{"version":3,"file":"index.js","sources":["../../src/connector.model.ts","../../src/utils.ts","../../src/constraints.ts","../../src/connector.ts","../../src/connector-base.ts","../../src/draggable.ts","../../src/connector-flowchart.ts","../../src/connector-bezier.ts","../../src/connectable.ts","../../src/connection.ts"],"sourcesContent":["export type ConnectorPointPosition = 'top' | 'left' | 'right' | 'bottom';\nexport type ConnectionType = 'stateMachine' | 'straight';\n\ntype PromiseOr<T> = Promise<T> | T;\n\nexport interface ConnectorOptions {\n  pointerSize?: number;\n  strokeWidth?: number;\n  color?: string;\n  hoverColor?: string;\n  arrowSize?: number;\n}\n\nexport interface EasyConnectionOptions extends ConnectorOptions {\n  type: ConnectionType;\n}\n\nexport enum StartPositionEnum {\n  horizontalLeftTop,\n  horizontalLeftBottom,\n  horizontalRightTop,\n  horizontalRightBottom,\n  verticalLeftTop,\n  verticalLeftBottom,\n  verticalRightTop,\n  verticalRightBottom,\n}\n\nexport interface SvgCanvasParameters {\n  height: number;\n  width: number;\n  leftTop: number[];\n  leftBottom: number[];\n  rightTop: number[];\n  rightBottom: number[];\n}\n\nexport interface DrawPath {\n  drawPath: () => void;\n}\n\nexport interface DrawEndArrow {\n  drawEndArrow: () => void;\n}\n\nexport interface DragOptions extends ConnectorOptions {\n  type: ConnectionType;\n  // TODO\n  onBeforeDrag?: () => PromiseOr<boolean>;\n\n  onDragging?: () => void;\n}\n\nexport interface DomConnection {\n  start: HTMLElement;\n  end: HTMLElement;\n}\n","import { ConnectorOptions } from './connector.model';\n\ninterface IndexedObject {\n  [a: string]: string;\n}\n\ninterface PolylineEvents {\n  onmouseenter?: (event: MouseEvent) => void;\n  onmouseleave?: (event: MouseEvent) => void;\n  onmousedown?: (event: MouseEvent) => void;\n}\n\ntype svgElement = 'path' | 'polyline';\n\nexport function createSvgElement(label: svgElement, styleMap: IndexedObject) {\n  const elem = document.createElementNS('http://www.w3.org/2000/svg', label);\n  Object.keys(styleMap).forEach(key => {\n    elem.setAttributeNS(null, key, styleMap[key]);\n  });\n  return elem;\n}\n\nexport function createPolyline(\n  options: ConnectorOptions,\n  { onmouseenter, onmouseleave, onmousedown }: PolylineEvents,\n): SVGPolylineElement {\n  const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');\n  polyline.setAttributeNS(null, 'fill', 'none');\n  polyline.setAttributeNS(null, 'stroke', `${options.color}`);\n  polyline.setAttributeNS(null, 'stroke-width', `${options.strokeWidth}`);\n  polyline.onmouseenter = onmouseenter;\n  polyline.onmouseleave = onmouseleave;\n  polyline.onmousedown = onmousedown;\n  return polyline;\n}\n\nexport function createPath(\n  options: ConnectorOptions,\n  { onmouseenter, onmouseleave, onmousedown }: PolylineEvents,\n): SVGPathElement {\n  const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  path.setAttributeNS(null, 'fill', 'none');\n  path.setAttributeNS(null, 'stroke', `${options.color}`);\n  path.setAttributeNS(null, 'stroke-width', `${options.strokeWidth}`);\n  path.onmouseenter = onmouseenter;\n  path.onmouseleave = onmouseleave;\n  path.onmousedown = onmousedown;\n  return path;\n}\n\nexport function bezierPath(path: SVGPathElement, start: number[], mid: number[], end: number[]) {\n  path.setAttributeNS(null, 'd', `\n  M${start[0]} ${start[1]}\n  Q${mid[0]} ${mid[1]}\n  ${end[0]} ${end[1]}\n  `);\n}\n\nexport function straightPolyline(polyLine: SVGPolylineElement, start: number[], end: number[]) {\n  polyLine.setAttributeNS(null, 'points', `${start.toString()} ${end.toString()}`);\n}\n\nexport function stateMachinePolyLine(\n  polyLine: SVGPolylineElement,\n  start: number[],\n  midA: number[],\n  midB: number[],\n  end: number[],\n) {\n  polyLine.setAttributeNS(\n    null,\n    'points',\n    `${start.toString()} ${midA.toString()} ${midB.toString()} ${end.toString()}`,\n  );\n}\n\nexport function px2num(pxVal: string): number {\n  return +pxVal.slice(0, pxVal.length - 2);\n}\n\nexport function num2px(numVal: number): string {\n  return `${numVal}px`;\n}\n\n/**\n * add class names for a html element, when the element already has the className, skip\n * @param elem target html element\n * @param cls classNames or className\n */\nexport function addClassIfNotExist(elem: Element, cls: string[] | string): void {\n  const classes = Array.isArray(cls) ? cls : [cls];\n  for (const c of classes) {\n    if (!elem.classList.contains(c)) {\n      elem.classList.add(c);\n    }\n  }\n}\n\nexport function removeClass(elem: Element | Element[], cls: string[] | string): void {\n  const classes = Array.isArray(cls) ? cls : [cls];\n  const elements = Array.isArray(elem) ? elem : [elem];\n  for (const e of elements) {\n    for (const c of classes) {\n      e.classList.remove(c);\n    }\n  }\n}\n\n/**\n * Check if two HTML elements is Overlapping one by one\n * @param elemA first element\n * @param elemB second element\n */\nexport function ifOverlapping(elemA, elemB): boolean {\n  const rect1 = elemA.getBoundingClientRect();\n  const rect2 = elemB.getBoundingClientRect();\n  return !(\n    rect1.right < rect2.left ||\n    rect1.left > rect2.right ||\n    rect1.bottom < rect2.top ||\n    rect1.top > rect2.bottom\n  );\n}\n\nexport function setStyle(elem: HTMLElement, style: Partial<CSSStyleDeclaration>) {\n  Object.keys(style).forEach(key => {\n    elem.style[key] = style[key];\n  });\n}\n","export const prefixCls = 'cnt';\n","import { ConnectorOptions, StartPositionEnum, SvgCanvasParameters } from './connector.model';\nimport { addClassIfNotExist, removeClass, setStyle } from './utils';\nimport { prefixCls } from './constraints';\nimport { ConnectorPoint } from './connector-point';\n\n/**\n * The root class of connection\n */\nexport abstract class Connector {\n  options: ConnectorOptions;\n\n  // The container of the zone, every thing is on it\n  playground: HTMLElement;\n\n  // The start HTMLElement of the connection\n  startElement: HTMLElement;\n\n  // The end HTMLElement of the connection\n  endElement: HTMLElement;\n\n  // The element that attached on the start/end element\n  // usually, there will be 4 most on each element, one at each side\n  startPointer: ConnectorPoint;\n  endPointer: ConnectorPoint;\n\n  // describes where the start element is related to the end element\n  startPosition: StartPositionEnum;\n\n  // the svg container, each connector has one svg\n  svgElement: SVGSVGElement;\n  svgParameters: SvgCanvasParameters;\n\n  isMoving = false;\n  helperPointer: HTMLElement;\n\n  /**\n   * @param playground start connector\n   * @param startElement start connector\n   * @param endElement end connector\n   * @param options end connector\n   */\n  protected constructor(\n    playground: HTMLElement,\n    startElement: HTMLElement,\n    endElement: HTMLElement,\n    options: ConnectorOptions,\n  ) {\n    this.options = {\n      pointerSize: 4,\n      strokeWidth: 1,\n      color: '#cccccc',\n      arrowSize: 15,\n      ...options,\n    };\n    this.startElement = startElement;\n    this.endElement = endElement;\n    addClassIfNotExist(startElement, `${prefixCls}-element`);\n    addClassIfNotExist(endElement, `${prefixCls}-element`);\n    this.playground = playground;\n\n    // find the connect point that used in each element\n    const res = this.createConnectPoint(this.startElement, this.endElement);\n    this.startPointer = res.start;\n    this.endPointer = res.end;\n    addClassIfNotExist(this.startPointer, `${prefixCls}-pointer`);\n    addClassIfNotExist(this.endPointer, `${prefixCls}-pointer`);\n\n    // create a svg area between start and end\n    this.svgElement = this.createSvgArea();\n    this.drawPath();\n    this.playground.appendChild(this.svgElement);\n  }\n\n  /**\n   * Remove and render the svg part\n   * TODO: more efficient way should be used here\n   */\n  public renderLine() {\n    const res = this.createConnectPoint(this.startElement, this.endElement);\n    this.startPointer = res.start;\n    this.endPointer = res.end;\n    addClassIfNotExist(this.startPointer, `${prefixCls}-pointer`);\n    addClassIfNotExist(this.endPointer, `${prefixCls}-pointer`);\n    this.playground.removeChild(this.svgElement);\n    this.svgElement = this.createSvgArea();\n    this.drawPath();\n    this.playground.appendChild(this.svgElement);\n  }\n\n  /**\n   * remove the whole svg part and the connect pointer\n   */\n  public dispose() {\n    if (this.startElement && this.startPointer) {\n      this.startElement.removeChild(this.startPointer);\n    }\n    if (this.endElement && this.endPointer) {\n      this.endElement.removeChild(this.endPointer);\n    }\n    this.playground.removeChild(this.svgElement);\n  }\n\n  abstract drawPath(): void;\n\n  private createConnectPoint(startElement: HTMLElement, endElement: HTMLElement) {\n    if (!!this.startPointer) {\n      startElement.removeChild(this.startPointer);\n    }\n    if (!!this.endPointer) {\n      endElement.removeChild(this.endPointer);\n    }\n    // calc the absolute distance between two elements\n    // should notice that the area depends on the endElement position related to the start element\n    const startPointer = document.createElement('div');\n    const endPointer = document.createElement('div');\n\n    startPointer.style.position = 'absolute';\n    endPointer.style.position = 'absolute';\n    startPointer.style.backgroundColor = '#000000';\n    endPointer.style.backgroundColor = '#000000';\n    startPointer.style.width = `${this.options.pointerSize}px`;\n    endPointer.style.width = `${this.options.pointerSize}px`;\n    startPointer.style.height = `${this.options.pointerSize}px`;\n    endPointer.style.height = `${this.options.pointerSize}px`;\n\n    const xDistance = startElement.offsetLeft - endElement.offsetLeft;\n    const yDistance = startElement.offsetTop - endElement.offsetTop;\n\n    if (Math.abs(xDistance) >= Math.abs(yDistance)) {\n      if (xDistance <= 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.horizontalLeftTop;\n      } else if (xDistance <= 0 && yDistance > 0) {\n        this.startPosition = StartPositionEnum.horizontalLeftBottom;\n      } else if (xDistance > 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.horizontalRightTop;\n      } else {\n        this.startPosition = StartPositionEnum.horizontalRightBottom;\n      }\n    } else {\n      if (xDistance <= 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.verticalLeftTop;\n      } else if (xDistance <= 0 && yDistance > 0) {\n        this.startPosition = StartPositionEnum.verticalLeftBottom;\n      } else if (xDistance > 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.verticalRightTop;\n      } else {\n        this.startPosition = StartPositionEnum.verticalRightBottom;\n      }\n    }\n\n    switch (this.startPosition) {\n      case StartPositionEnum.horizontalLeftTop:\n      case StartPositionEnum.horizontalLeftBottom:\n        ((startPointer as unknown) as ConnectorPoint).position = 'right';\n        ((endPointer as unknown) as ConnectorPoint).position = 'left';\n        startPointer.style.left = `${startElement.getBoundingClientRect().width}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.left = `${-this.options.pointerSize}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n      case StartPositionEnum.horizontalRightTop:\n        ((startPointer as unknown) as ConnectorPoint).position = 'left';\n        ((endPointer as unknown) as ConnectorPoint).position = 'right';\n        startPointer.style.left = `${-this.options.pointerSize}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        break;\n      case StartPositionEnum.verticalLeftTop:\n      case StartPositionEnum.verticalRightTop:\n        // startElem -> bottom\n        // endElem   -> top\n        ((startPointer as unknown) as ConnectorPoint).position = 'bottom';\n        ((endPointer as unknown) as ConnectorPoint).position = 'top';\n        startPointer.style.left = `${startElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.top = `${-this.options.pointerSize}px`;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n      case StartPositionEnum.verticalRightBottom:\n        // startElem -> top\n        // endElem   -> bottom\n        ((startPointer as unknown) as ConnectorPoint).position = 'top';\n        ((endPointer as unknown) as ConnectorPoint).position = 'bottom';\n        startPointer.style.left = `${startElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        startPointer.style.top = `-${this.options.pointerSize}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height}px`;\n        break;\n    }\n\n    startElement.appendChild(startPointer);\n    endElement.appendChild(endPointer);\n    return {\n      start: (startPointer as unknown) as ConnectorPoint,\n      end: (endPointer as unknown) as ConnectorPoint,\n    };\n  }\n\n  /**\n   * Create a svg area used for the connection line between the start and end point\n   * the area is rect\n   */\n  private createSvgArea() {\n    const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgElement.innerHTML = `\n    <defs>\n      <marker id=\"markerEndArrow\" viewBox=\"0 0 30 30\" refX=\"9\" refY=\"3\"  markerUnits=\"strokeWidth\" markerWidth=\"30\" markerHeight=\"30\" orient=\"auto\">\n        <path style=\"fill:${this.options.color};opacity:1\" d=\"M0,0 0,6 9,3z\" />\n      </marker>\n    </defs>`;\n    // set svg position\n    // use position attribute to handle with ethe position\n    svgElement.style.position = 'absolute';\n    svgElement.style.zIndex = '999';\n    svgElement.style.overflow = 'visible';\n\n    const { offsetLeft: startOffsetLeft, offsetTop: startOffsetTop } = this.getTotalOffset(this.startPointer);\n    const { offsetLeft: endOffsetLeft, offsetTop: endOffsetTop } = this.getTotalOffset(this.endPointer);\n\n    switch (this.startPosition) {\n      case StartPositionEnum.horizontalLeftTop:\n      case StartPositionEnum.verticalLeftTop:\n        svgElement.style.left = `${startOffsetLeft}px`;\n        svgElement.style.top = `${startOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalRightTop:\n      case StartPositionEnum.verticalRightTop:\n        svgElement.style.left = `${endOffsetLeft}px`;\n        svgElement.style.top = `${startOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n      case StartPositionEnum.verticalLeftBottom:\n        svgElement.style.left = `${startOffsetLeft}px`;\n        svgElement.style.top = `${endOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n      case StartPositionEnum.verticalRightBottom:\n        svgElement.style.left = `${endOffsetLeft}px`;\n        svgElement.style.top = `${endOffsetTop}px`;\n        break;\n    }\n\n    const width = Math.abs(startOffsetLeft - endOffsetLeft) + this.options.pointerSize;\n    const height = Math.abs(startOffsetTop - endOffsetTop) + this.options.pointerSize;\n    svgElement.setAttribute('width', `${width}px`);\n    svgElement.setAttribute('height', `${height}px`);\n\n    const svgWidth: number = svgElement.width.baseVal.valueInSpecifiedUnits;\n    const svgHeight: number = svgElement.height.baseVal.valueInSpecifiedUnits;\n\n    this.svgParameters = {\n      height: svgHeight,\n      width: svgWidth,\n      leftTop: [this.options.pointerSize / 2, this.options.pointerSize / 2],\n      leftBottom: [this.options.pointerSize / 2, svgHeight - this.options.pointerSize / 2],\n      rightTop: [svgWidth - this.options.pointerSize / 2, this.options.pointerSize / 2],\n      rightBottom: [svgWidth - this.options.pointerSize / 2, svgHeight - this.options.pointerSize / 2],\n    };\n    return svgElement;\n  }\n\n  getTotalOffset(pointer: ConnectorPoint) {\n    const offsetLeft = pointer.offsetLeft + (pointer.offsetParent as HTMLElement).offsetLeft;\n    const offsetTop = pointer.offsetTop + (pointer.offsetParent as HTMLElement).offsetTop;\n    return {\n      offsetLeft,\n      offsetTop,\n    };\n  }\n\n  private checkIfMouseEventOnArrow(event: MouseEvent): boolean {\n    const isNear = (a, b) => Math.abs(a - b) < 50;\n    const { offsetX, offsetY } = event;\n    const mapping = {\n      [StartPositionEnum.horizontalLeftTop]: 'rightBottom',\n      [StartPositionEnum.verticalLeftTop]: 'rightBottom',\n    };\n    const [arrowX, arrowY] = this.svgParameters[mapping[this.startPosition]];\n    return isNear(offsetX, arrowX) && isNear(offsetY, arrowY);\n  }\n\n  // Functions that can be inherited or override\n  // Used for the children classes, ep: ConnectorBase, ConnectorFlowchart...\n\n  /**\n   * When mouse move into the connection, the hover color shall be changed\n   * @param event: MouseEvent\n   */\n  onmouseenter = (event: MouseEvent) => {\n    const polyline = event.target as HTMLElement;\n    const hoverColor = this.options.hoverColor || this.options.color;\n    polyline.style.stroke = hoverColor;\n    this.svgElement.getElementById('markerEndArrow').getElementsByTagName('path')[0].style.fill = hoverColor;\n    // tslint:disable-next-line: Unnecessary semicolon\n  };\n\n  /**\n   * When mouse move leave the connection, the hover color shall be changed\n   * @param event: MouseEvent\n   */\n  onmouseleave = (event: MouseEvent) => {\n    (event.target as HTMLElement).style.stroke = this.options.color;\n    this.svgElement.getElementById('markerEndArrow').getElementsByTagName('path')[0].style.fill = this.options.color;\n    // tslint:disable-next-line: Unnecessary semicolon\n  };\n\n  /**\n   * While mousedown on then endArrow, the connection should start moving\n   * We can modify the connection to other elements or just destroy the element\n   * @param event: MouseEvent\n   */\n  onmousedown = (event: MouseEvent) => {\n    const isOnArrow = this.checkIfMouseEventOnArrow(event);\n    console.log(isOnArrow);\n    if (isOnArrow) {\n      // this connection should be removed and temp lines should be created\n      // build a helper pointer and connect it with the helper point\n      this.isMoving = true;\n      const helperPointOffset = 3;\n      const x: number = event.pageX - this.playground.offsetLeft;\n      const y: number = event.pageY - this.playground.offsetTop;\n      this.helperPointer = document.createElement('div');\n      setStyle(this.helperPointer, {\n        width: '0px',\n        height: '0px',\n        position: 'absolute',\n        left: `${x - helperPointOffset}px`,\n        top: `${y - helperPointOffset}px`,\n      });\n      this.playground.appendChild(this.helperPointer);\n      this.endElement = this.helperPointer;\n      this.endPointer = undefined;\n      // reconnect\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isMoving) {\n          this.helperPointer.style.left = `${_event.pageX - this.playground.offsetLeft - helperPointOffset}px`;\n          this.helperPointer.style.top = `${_event.pageY - this.playground.offsetTop - helperPointOffset}px`;\n          this.renderLine();\n          const elementMouseIsOver = document.elementsFromPoint(_event.clientX, _event.clientY);\n          const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n\n          const allElements = this.playground.getElementsByClassName(`${prefixCls}-element`);\n          if (targetElements.length > 0) {\n            addClassIfNotExist(targetElements[0], `${prefixCls}-will`);\n            // others should be deleted\n            removeClass(Array.from(allElements).filter(i => i !== targetElements[0]), `${prefixCls}-will`);\n          } else {\n            removeClass(Array.from(allElements), `${prefixCls}-will`);\n          }\n        }\n      };\n\n      // TODO: many optimize\n      document.onmouseup = (_upEvent: MouseEvent) => {\n        this.isMoving = false;\n        const elementMouseIsOver = document.elementsFromPoint(_upEvent.clientX, _upEvent.clientY);\n        const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n        if (targetElements.length > 0) {\n          this.endElement = targetElements[0] as HTMLElement;\n          this.endPointer = undefined;\n          this.renderLine();\n          removeClass(targetElements[0], `${prefixCls}-will`);\n        } else {\n          this.dispose();\n        }\n        if (this.helperPointer) {\n          this.playground.removeChild(this.helperPointer);\n          this.helperPointer = undefined;\n        }\n      };\n    }\n    // tslint:disable-next-line: Unnecessary semicolon\n  };\n}\n","import { ConnectorOptions, StartPositionEnum, SvgCanvasParameters } from './connector.model';\nimport { prefixCls } from './constraints';\nimport { ConnectorPoint } from './connector-point';\nimport { addClassIfNotExist, createPolyline, removeClass, setStyle, straightPolyline } from './utils';\nimport { Connector } from './connector';\n\nexport class ConnectorBase extends Connector {\n  startPosition: StartPositionEnum;\n\n  // whether the user is moving the arrow\n  isModifyingConnector = false;\n\n  constructor(playground: HTMLElement, startElement: HTMLElement, endElement: HTMLElement, options: ConnectorOptions) {\n    super(playground, startElement, endElement, options);\n  }\n\n  drawPath() {\n    let startCoordinate;\n    let endCoordinate;\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n      case StartPositionEnum.horizontalLeftTop:\n        // draw a line from leftTop to rightBottom\n        startCoordinate = this.svgParameters.leftTop;\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n      case StartPositionEnum.horizontalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.verticalRightTop:\n      case StartPositionEnum.horizontalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.verticalRightBottom:\n      case StartPositionEnum.horizontalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        endCoordinate = this.svgParameters.leftTop;\n        break;\n    }\n    const path = createPolyline(this.options, {\n      onmouseenter: this.onmouseenter,\n      onmouseleave: this.onmouseleave,\n      onmousedown: this.onmousedown,\n    });\n    straightPolyline(path, startCoordinate, endCoordinate);\n    path.style.markerEnd = 'url(#markerEndArrow)';\n    this.svgElement.appendChild(path);\n  }\n}\n","import { px2num, num2px } from './utils';\nimport { prefixCls } from './constraints';\nimport { DragOptions } from './connector.model';\n\ninterface Coordinate {\n  xPos: number;\n  yPos: number;\n}\n\nexport class Draggable {\n  elem: HTMLElement;\n  isDragging = false;\n  dragOptions: DragOptions;\n\n  startCoordinate: Coordinate;\n  elemStartCoordinate: Coordinate;\n\n  constructor(elem: HTMLElement, dragOptions: DragOptions) {\n    this.elem = elem;\n    this.dragOptions = dragOptions || { type: 'straight' };\n    this.makeItDraggable();\n    this.elemStartCoordinate = {\n      xPos: px2num(getComputedStyle(this.elem).left),\n      yPos: px2num(getComputedStyle(this.elem).top),\n    };\n  }\n\n  private makeItDraggable() {\n    this.elem.style.position = 'absolute';\n    this.elem.onmousedown = (event: MouseEvent) => {\n      this.startCoordinate = {\n        xPos: event.clientX,\n        yPos: event.clientY,\n      };\n      this.isDragging = true;\n\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isDragging) {\n          const _diffX = _event.clientX - this.startCoordinate.xPos;\n          const _diffY = _event.clientY - this.startCoordinate.yPos;\n          this.elem.style.left = num2px(this.elemStartCoordinate.xPos + _diffX);\n          this.elem.style.top = num2px(this.elemStartCoordinate.yPos + _diffY);\n          if (typeof this.dragOptions.onDragging === 'function') {\n            this.dragOptions.onDragging();\n          }\n        }\n      };\n\n      document.onmouseup = () => {\n        this.isDragging = false;\n        this.startCoordinate = undefined;\n        // new element position should be set\n        this.elemStartCoordinate = {\n          xPos: px2num(getComputedStyle(this.elem).left),\n          yPos: px2num(getComputedStyle(this.elem).top),\n        };\n\n        document.onmousemove = () => {};\n      };\n    };\n  }\n}\n","import { ConnectorOptions, StartPositionEnum, DrawPath } from './connector.model';\nimport { createPolyline, stateMachinePolyLine } from './utils';\nimport { Connector } from './connector';\n\nexport class ConnectorFlowchart extends Connector implements DrawPath {\n  constructor(playground: HTMLElement, startPoint: HTMLElement, endPoint: HTMLElement, options: ConnectorOptions) {\n    super(playground, startPoint, endPoint, options);\n  }\n\n  drawPath() {\n    const svgWidth: number = this.svgElement.width.baseVal.valueInSpecifiedUnits;\n    const svgHeight: number = this.svgElement.height.baseVal.valueInSpecifiedUnits;\n    let startCoordinate;\n    let middleACoordinate;\n    let middleBCoordinate;\n    let endCoordinate;\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n        startCoordinate = this.svgParameters.leftTop;\n        middleACoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.horizontalLeftTop:\n        startCoordinate = this.svgParameters.leftTop;\n        middleACoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.verticalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        middleACoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.horizontalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        middleACoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        middleACoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        middleACoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.verticalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        middleACoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.leftTop;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        middleACoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.leftTop;\n    }\n\n    const path = createPolyline(this.options, {\n      onmouseenter: this.onmouseenter,\n      onmouseleave: this.onmouseleave,\n      onmousedown: this.onmousedown,\n    });\n    stateMachinePolyLine(path, startCoordinate, middleACoordinate, middleBCoordinate, endCoordinate);\n    path.style.markerEnd = 'url(#markerEndArrow)';\n    this.svgElement.appendChild(path);\n  }\n}\n","import { Connector } from './connector';\nimport { DrawPath, StartPositionEnum } from './connector.model';\nimport { bezierPath, createPath } from './utils';\n\nexport class ConnectorBezier extends Connector implements DrawPath {\n  drawPath(): void {\n    const svgWidth: number = this.svgElement.width.baseVal.valueInSpecifiedUnits;\n    const svgHeight: number = this.svgElement.height.baseVal.valueInSpecifiedUnits;\n    let startCoordinate;\n    let endCoordinate;\n    let middleCoordinate;\n    switch (this.startPosition) {\n      case StartPositionEnum.horizontalLeftTop:\n        middleCoordinate = [svgWidth / 2 + 10, svgHeight / 2 - 10];\n        startCoordinate = this.svgParameters.leftTop;\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.verticalLeftTop:\n        middleCoordinate = [svgWidth / 2 - 10, svgHeight / 2 + 10];\n        startCoordinate = this.svgParameters.leftTop;\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n      case StartPositionEnum.verticalLeftBottom:\n        middleCoordinate = [svgWidth / 2 - 10, svgHeight / 2 + 10];\n        startCoordinate = this.svgParameters.leftBottom;\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.horizontalRightTop:\n      case StartPositionEnum.verticalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        endCoordinate = this.svgParameters.leftBottom;\n        middleCoordinate = [svgWidth / 2 - 10, svgHeight / 2 + 10];\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n      case StartPositionEnum.verticalRightBottom:\n      default:\n        startCoordinate = this.svgParameters.rightBottom;\n        endCoordinate = this.svgParameters.leftTop;\n        middleCoordinate = [svgWidth / 2 - 10, svgHeight / 2 + 10];\n        break;\n    }\n    const path = createPath(this.options, {\n      onmouseenter: this.onmouseenter,\n      onmouseleave: this.onmouseleave,\n      onmousedown: this.onmousedown,\n    });\n    bezierPath(path, startCoordinate, middleCoordinate, endCoordinate);\n    console.log(startCoordinate, endCoordinate);\n    path.style.markerEnd = 'url(#markerEndArrow)';\n    this.svgElement.appendChild(path);\n  }\n}\n","import { Draggable } from './draggable';\nimport { DragOptions } from './connector.model';\nimport { prefixCls } from './constraints';\nimport { ConnectorBase } from './connector-base';\nimport { ConnectorFlowchart } from './connector-flowchart';\nimport { addClassIfNotExist, ifOverlapping, removeClass, setStyle } from './utils';\nimport { ConnectorBezier } from './connector-bezier';\n\nconst TYPE_MAP = {\n  undefined: ConnectorBase,\n  straight: ConnectorBase,\n  flowchart: ConnectorFlowchart,\n  bezier: ConnectorBezier,\n};\n\nexport class Connectable extends Draggable {\n  playground: HTMLElement;\n  nativeElement: HTMLElement;\n  helperPointer: HTMLElement;\n  isCreatingNewConnector = false;\n  onCreatingLine;\n  constructor(playground: HTMLElement, elem: HTMLElement, dragOptions: DragOptions, { onCreatingLine }) {\n    super(elem, dragOptions);\n    this.nativeElement = elem;\n    setStyle(elem, {\n      zIndex: '2',\n    });\n    this.playground = playground;\n    this.onCreatingLine = onCreatingLine;\n    addClassIfNotExist(elem, `${prefixCls}-element`);\n    this.createAnchor();\n  }\n\n  private createAnchor() {\n    const anchor: HTMLElement = document.createElement('div');\n    anchor.classList.add(`${prefixCls}-anchor`);\n    setStyle(anchor, {\n      width: '10px',\n      height: '10px',\n      backgroundColor: 'red',\n      position: 'absolute',\n      left: '15px',\n      top: '15px',\n    });\n\n    // while anchor press down\n    // a new connection will be created\n    anchor.onmousedown = (event: MouseEvent) => {\n      event.stopPropagation();\n      this.isCreatingNewConnector = true;\n\n      // create a overlay entPointer at the click position\n\n      // if offset is 0, the pointer will always hover the helper point instead of the other element\n      const helperPointOffset = 3;\n\n      const x: number = event.pageX - this.playground.offsetLeft;\n      const y: number = event.pageY - this.playground.offsetTop;\n      this.helperPointer = document.createElement('div');\n      setStyle(this.helperPointer, {\n        width: '0px',\n        height: '0px',\n        position: 'absolute',\n        left: `${x - helperPointOffset}px`,\n        top: `${y - helperPointOffset}px`,\n      });\n      this.playground.appendChild(this.helperPointer);\n      let _newConnection = new TYPE_MAP[this.dragOptions.type](\n        this.playground,\n        this.elem,\n        this.helperPointer,\n        this.dragOptions,\n      );\n\n      // TODO: onmousemove and onmouseup's listener should be removed after onmouseup\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isCreatingNewConnector) {\n          this.helperPointer.style.left = `${_event.pageX - this.playground.offsetLeft - helperPointOffset}px`;\n          this.helperPointer.style.top = `${_event.pageY - this.playground.offsetTop - helperPointOffset}px`;\n          if (_newConnection) {\n            _newConnection.renderLine();\n          }\n          const elementMouseIsOver = document.elementsFromPoint(_event.clientX, _event.clientY);\n          const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n\n          const allElements = this.playground.getElementsByClassName(`${prefixCls}-element`);\n          if (targetElements.length > 0) {\n            addClassIfNotExist(targetElements[0], `${prefixCls}-will`);\n            // others should be deleted\n            removeClass(Array.from(allElements).filter(i => i !== targetElements[0]), `${prefixCls}-will`);\n          } else {\n            removeClass(Array.from(allElements), `${prefixCls}-will`);\n          }\n        }\n      };\n      document.onmouseup = (_upEvent: MouseEvent) => {\n        this.isCreatingNewConnector = false;\n        const elementMouseIsOver = document.elementsFromPoint(_upEvent.clientX, _upEvent.clientY);\n        const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n        if (_newConnection) {\n          _newConnection.dispose();\n          _newConnection = null;\n        }\n        if (targetElements.length > 0) {\n          this.onCreatingLine(targetElements[0]);\n          removeClass(targetElements[0], `${prefixCls}-will`);\n        }\n        if (this.helperPointer) {\n          this.playground.removeChild(this.helperPointer);\n          this.helperPointer = undefined;\n        }\n      };\n    };\n\n    this.elem.appendChild(anchor);\n  }\n}\n","import { DomConnection, EasyConnectionOptions } from './connector.model';\nimport { ConnectorBase } from './connector-base';\nimport { Connectable } from './connectable';\nimport { ConnectorFlowchart } from './connector-flowchart';\nimport { ConnectorBezier } from './connector-bezier';\nimport { ifOverlapping } from './utils';\n\ninterface ElementConnectionsMap {\n  [a: string]: Array<ConnectorBase>;\n}\n\nconst TYPE_MAP = {\n  undefined: ConnectorBase,\n  straight: ConnectorBase,\n  flowchart: ConnectorFlowchart,\n  bezier: ConnectorBezier,\n};\n\nexport class EasyConnection {\n  playground: HTMLElement;\n  options: EasyConnectionOptions;\n  connectableElements: Connectable[] = [];\n  connections: ConnectorBase[] = [];\n\n  elementConnectionsMap: ElementConnectionsMap = {};\n\n  constructor(\n    playground: HTMLElement,\n    elements: HTMLElement[] = [],\n    connections: DomConnection[] = [],\n    options: EasyConnectionOptions = { type: 'straight' },\n  ) {\n    this.playground = playground;\n    this.options = {\n      color: '#cccccc',\n      hoverColor: 'red',\n      ...options,\n    };\n    // set the playground to position relative\n    // init the connections\n    for (const elem of elements) {\n      this.elementConnectionsMap[elem.id] = [];\n    }\n    for (const con of connections) {\n      const connectionInstance = new TYPE_MAP[options.type](playground, con.start, con.end, options);\n      this.elementConnectionsMap[con.start.id].push(connectionInstance);\n      this.elementConnectionsMap[con.end.id].push(connectionInstance);\n      this.connections.push(connectionInstance);\n    }\n    for (const elem of elements) {\n      this.connectableElements.push(\n        new Connectable(\n          playground,\n          elem,\n          {\n            ...options,\n            onDragging: () => {\n              // all lines connected to this element should be reRendered\n              this.elementConnectionsMap[elem.id].forEach(i => i.renderLine());\n            },\n          },\n          {\n            onCreatingLine: (targetElem: HTMLElement) => {\n              this.addConnection({\n                start: elem,\n                end: targetElem,\n              });\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  addElement(elem: HTMLElement): void {\n    this.elementConnectionsMap[elem.id] = [];\n    this.playground.appendChild(elem);\n    this.connectableElements.push(\n      new Connectable(\n        this.playground,\n        elem,\n        {\n          ...this.options,\n          onDragging: () => {\n            // all lines connected to this element should be reRendered\n            this.elementConnectionsMap[elem.id].forEach(i => i.renderLine());\n          },\n        },\n        {\n          onCreatingLine: (targetElem: HTMLElement) => {\n            this.addConnection({\n              start: elem,\n              end: targetElem,\n            });\n          },\n        },\n      ),\n    );\n  }\n  addConnection(connection: DomConnection): void {\n    const connectionInstance = new TYPE_MAP[this.options.type](\n      this.playground,\n      connection.start,\n      connection.end,\n      this.options,\n    );\n    this.elementConnectionsMap[connection.start.id].push(connectionInstance);\n    this.elementConnectionsMap[connection.end.id].push(connectionInstance);\n    this.connections.push(connectionInstance);\n  }\n}\n"],"names":["StartPositionEnum","createPolyline","options","onmouseenter","onmouseleave","onmousedown","polyline","document","createElementNS","setAttributeNS","color","strokeWidth","createPath","path","bezierPath","start","mid","end","straightPolyline","polyLine","toString","stateMachinePolyLine","midA","midB","px2num","pxVal","slice","length","num2px","numVal","addClassIfNotExist","elem","cls","classes","Array","isArray","c","classList","contains","add","removeClass","elements","e","remove","setStyle","style","Object","keys","forEach","key","prefixCls","Connector","playground","startElement","endElement","isMoving","event","target","hoverColor","stroke","svgElement","getElementById","getElementsByTagName","fill","isOnArrow","checkIfMouseEventOnArrow","console","log","helperPointOffset","x","pageX","offsetLeft","y","pageY","offsetTop","helperPointer","createElement","width","height","position","left","top","appendChild","endPointer","undefined","onmousemove","_event","renderLine","elementMouseIsOver","elementsFromPoint","clientX","clientY","targetElements","filter","i","allElements","getElementsByClassName","from","onmouseup","_upEvent","dispose","removeChild","pointerSize","arrowSize","res","createConnectPoint","startPointer","createSvgArea","drawPath","backgroundColor","xDistance","yDistance","Math","abs","startPosition","horizontalLeftTop","horizontalLeftBottom","horizontalRightTop","horizontalRightBottom","verticalLeftTop","verticalLeftBottom","verticalRightTop","verticalRightBottom","getBoundingClientRect","innerHTML","zIndex","overflow","getTotalOffset","startOffsetLeft","startOffsetTop","endOffsetLeft","endOffsetTop","setAttribute","svgWidth","baseVal","valueInSpecifiedUnits","svgHeight","svgParameters","leftTop","leftBottom","rightTop","rightBottom","pointer","offsetParent","isNear","a","b","offsetX","offsetY","mapping","arrowX","arrowY","ConnectorBase","isModifyingConnector","startCoordinate","endCoordinate","markerEnd","Draggable","dragOptions","isDragging","type","makeItDraggable","elemStartCoordinate","xPos","getComputedStyle","yPos","_diffX","_diffY","onDragging","ConnectorFlowchart","startPoint","endPoint","middleACoordinate","middleBCoordinate","ConnectorBezier","middleCoordinate","TYPE_MAP","straight","flowchart","bezier","Connectable","onCreatingLine","isCreatingNewConnector","nativeElement","createAnchor","anchor","stopPropagation","_newConnection","EasyConnection","connections","connectableElements","elementConnectionsMap","id","con","connectionInstance","push","targetElem","addConnection","connection"],"mappings":"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"}