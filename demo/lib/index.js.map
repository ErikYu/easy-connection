{"version":3,"file":"index.js","sources":["../../src/connector.model.ts","../../src/constraints.ts","../../src/utils.ts","../../src/connector-base.ts","../../src/draggable.ts","../../src/connector-flowchart.ts","../../src/connectable.ts","../../src/connection.ts"],"sourcesContent":["export type ConnectorPointPosition = 'top' | 'left' | 'right' | 'bottom';\nexport type ConnectionType = 'stateMachine' | 'straight';\n\ntype PromiseOr<T> = Promise<T> | T;\n\nexport interface ConnectorOptions {\n  pointerSize?: number;\n  strokeWidth?: number;\n  color?: string;\n  arrowSize?: number;\n}\n\nexport interface EasyConnectionOptions extends ConnectorOptions {\n  type: ConnectionType;\n}\n\nexport enum StartPositionEnum {\n  horizontalLeftTop,\n  horizontalLeftBottom,\n  horizontalRightTop,\n  horizontalRightBottom,\n  verticalLeftTop,\n  verticalLeftBottom,\n  verticalRightTop,\n  verticalRightBottom,\n}\n\nexport interface SvgCanvasParameters {\n  height: number;\n  width: number;\n  leftTop: number[];\n  leftBottom: number[];\n  rightTop: number[];\n  rightBottom: number[];\n}\n\nexport interface DrawPath {\n  drawPath: () => void;\n}\n\nexport interface DrawEndArrow {\n  drawEndArrow: () => void;\n}\n\nexport interface DragOptions extends ConnectorOptions {\n  type: ConnectionType;\n  // TODO\n  onBeforeDrag?: () => PromiseOr<boolean>;\n\n  onDragging?: () => void;\n}\n\nexport interface DomConnection {\n  start: HTMLElement;\n  end: HTMLElement;\n}\n","export const prefixCls = 'cnt';\n","import { ConnectorOptions } from './connector.model';\n\ninterface IndexedObject {\n  [a: string]: string;\n}\ntype svgElement = 'path' | 'polyline';\n\nexport function createSvgElement(label: svgElement, styleMap: IndexedObject) {\n  const elem = document.createElementNS('http://www.w3.org/2000/svg', label);\n  Object.keys(styleMap).forEach(key => {\n    elem.setAttributeNS(null, key, styleMap[key]);\n  });\n  return elem;\n}\n\nexport function createPolyline(options: ConnectorOptions): SVGPolylineElement {\n  const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');\n  polyline.setAttributeNS(null, 'fill', 'transparent');\n  polyline.setAttributeNS(null, 'stroke', `${options.color}`);\n  polyline.setAttributeNS(null, 'stroke-width', `${options.strokeWidth}`);\n  return polyline;\n}\n\nexport function straightPolyline(polyLine: SVGPolylineElement, start: number[], end: number[]) {\n  polyLine.setAttributeNS(null, 'points', `${start.toString()} ${end.toString()}`);\n}\n\nexport function stateMachinePolyLine(\n  polyLine: SVGPolylineElement,\n  start: number[],\n  midA: number[],\n  midB: number[],\n  end: number[],\n) {\n  polyLine.setAttributeNS(\n    null,\n    'points',\n    `${start.toString()} ${midA.toString()} ${midB.toString()} ${end.toString()}`,\n  );\n}\n\nexport function px2num(pxVal: string): number {\n  return +pxVal.slice(0, pxVal.length - 2);\n}\n\nexport function num2px(numVal: number): string {\n  return `${numVal}px`;\n}\n\n/**\n * add class names for a html element, when the element already has the className, skip\n * @param elem target html element\n * @param cls classNames or className\n */\nexport function addClassIfNotExist(elem: HTMLElement, cls: string[] | string): void {\n  const classes = Array.isArray(cls) ? cls : [cls];\n  for (const c of classes) {\n    if (!elem.classList.contains(c)) {\n      elem.classList.add(c);\n    }\n  }\n}\n\nexport function ifOverlapping(elemA, elemB): boolean {\n  const rect1 = elemA.getBoundingClientRect();\n  const rect2 = elemB.getBoundingClientRect();\n  return !(\n    rect1.right < rect2.left ||\n    rect1.left > rect2.right ||\n    rect1.bottom < rect2.top ||\n    rect1.top > rect2.bottom\n  );\n}\n","import { ConnectorOptions, StartPositionEnum, SvgCanvasParameters } from './connector.model';\nimport { prefixCls } from './constraints';\nimport { ConnectorPoint } from './connector-point';\nimport { createPolyline, straightPolyline, addClassIfNotExist } from './utils';\n\nexport class ConnectorBase {\n  options: ConnectorOptions;\n  playground: HTMLElement;\n  startPointer: ConnectorPoint;\n  endPointer: ConnectorPoint;\n  svgElement: SVGSVGElement;\n  startElement: HTMLElement;\n  endElement: HTMLElement;\n\n  startPosition: StartPositionEnum;\n\n  // svg container parameters\n  svgParameters: SvgCanvasParameters;\n\n  /**\n   * Remove and render the svg part\n   * TODO: more efficient way should be used here\n   */\n  public renderLine() {\n    const res = this.createConnectPoint(this.startElement, this.endElement);\n    this.startPointer = res.start;\n    this.endPointer = res.end;\n    this.playground.removeChild(this.svgElement);\n    this.svgElement = this.createSvgArea();\n    this.drawEndArrow();\n    this.drawPath();\n    this.playground.appendChild(this.svgElement);\n  }\n\n  /**\n   * remove the whole svg part and the connect pointer\n   */\n  public dispose() {\n    if (!!this.startPointer) {\n      this.startElement.removeChild(this.startPointer);\n    }\n    if (!!this.endPointer) {\n      this.endElement.removeChild(this.endPointer);\n    }\n    this.playground.removeChild(this.svgElement);\n  }\n\n  /**\n   * @param playground start connector\n   * @param startElement start connector\n   * @param endElement end connector\n   * @param options end connector\n   */\n  constructor(playground: HTMLElement, startElement: HTMLElement, endElement: HTMLElement, options: ConnectorOptions) {\n    this.options = {\n      pointerSize: 4,\n      strokeWidth: 1,\n      color: '#cccccc',\n      arrowSize: 15,\n      ...options,\n    };\n    this.startElement = startElement;\n    this.endElement = endElement;\n    addClassIfNotExist(startElement, `${prefixCls}-element`);\n    addClassIfNotExist(endElement, `${prefixCls}-element`);\n    this.playground = playground;\n\n    // find the connect point that used in each element\n    const res = this.createConnectPoint(this.startElement, this.endElement);\n    this.startPointer = res.start;\n    this.endPointer = res.end;\n    addClassIfNotExist(this.startPointer, `${prefixCls}-pointer`);\n    addClassIfNotExist(this.endPointer, `${prefixCls}-pointer`);\n\n    // create a svg area between start and end\n    this.svgElement = this.createSvgArea();\n    this.drawEndArrow();\n    this.drawPath();\n    this.playground.appendChild(this.svgElement);\n  }\n\n  private createConnectPoint(startElement: HTMLElement, endElement: HTMLElement) {\n    if (!!this.startPointer) {\n      startElement.removeChild(this.startPointer);\n    }\n    if (!!this.endPointer) {\n      endElement.removeChild(this.endPointer);\n    }\n    // TBD\n    // calc the absolute distance between two elements\n    // should notice that the area depends on the endElement position related to the start element\n    // if width >>> height, use horizontal mode\n    // if height >>> width, use vertical mode\n\n    const startPointer = document.createElement('div');\n    const endPointer = document.createElement('div');\n\n    startPointer.style.position = 'absolute';\n    endPointer.style.position = 'absolute';\n    startPointer.style.backgroundColor = '#000000';\n    endPointer.style.backgroundColor = '#000000';\n    startPointer.style.width = `${this.options.pointerSize}px`;\n    endPointer.style.width = `${this.options.pointerSize}px`;\n    startPointer.style.height = `${this.options.pointerSize}px`;\n    endPointer.style.height = `${this.options.pointerSize}px`;\n\n    const xDistance = startElement.offsetLeft - endElement.offsetLeft;\n    const yDistance = startElement.offsetTop - endElement.offsetTop;\n\n    if (Math.abs(xDistance) >= Math.abs(yDistance)) {\n      if (xDistance <= 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.horizontalLeftTop;\n      } else if (xDistance <= 0 && yDistance > 0) {\n        this.startPosition = StartPositionEnum.horizontalLeftBottom;\n      } else if (xDistance > 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.horizontalRightTop;\n      } else {\n        this.startPosition = StartPositionEnum.horizontalRightBottom;\n      }\n    } else {\n      if (xDistance <= 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.verticalLeftTop;\n      } else if (xDistance <= 0 && yDistance > 0) {\n        this.startPosition = StartPositionEnum.verticalLeftBottom;\n      } else if (xDistance > 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.verticalRightTop;\n      } else {\n        this.startPosition = StartPositionEnum.verticalRightBottom;\n      }\n    }\n\n    switch (this.startPosition) {\n      case StartPositionEnum.horizontalLeftTop:\n      case StartPositionEnum.horizontalLeftBottom:\n        ((startPointer as unknown) as ConnectorPoint).position = 'right';\n        ((endPointer as unknown) as ConnectorPoint).position = 'left';\n        startPointer.style.left = `${startElement.getBoundingClientRect().width}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.left = `${-this.options.pointerSize}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n      case StartPositionEnum.horizontalRightTop:\n        ((startPointer as unknown) as ConnectorPoint).position = 'left';\n        ((endPointer as unknown) as ConnectorPoint).position = 'right';\n        startPointer.style.left = `${-this.options.pointerSize}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        break;\n      case StartPositionEnum.verticalLeftTop:\n      case StartPositionEnum.verticalRightTop:\n        // startElem -> bottom\n        // endElem   -> top\n        ((startPointer as unknown) as ConnectorPoint).position = 'bottom';\n        ((endPointer as unknown) as ConnectorPoint).position = 'top';\n        startPointer.style.left = `${startElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.top = `${-this.options.pointerSize}px`;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n      case StartPositionEnum.verticalRightBottom:\n        // startElem -> top\n        // endElem   -> bottom\n        ((startPointer as unknown) as ConnectorPoint).position = 'top';\n        ((endPointer as unknown) as ConnectorPoint).position = 'bottom';\n        startPointer.style.left = `${startElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        startPointer.style.top = `-${this.options.pointerSize}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height}px`;\n        break;\n    }\n\n    startElement.appendChild(startPointer);\n    endElement.appendChild(endPointer);\n    return {\n      start: (startPointer as unknown) as ConnectorPoint,\n      end: (endPointer as unknown) as ConnectorPoint,\n    };\n  }\n\n  getTotalOffset(pointer: ConnectorPoint) {\n    const offsetLeft = pointer.offsetLeft + (pointer.offsetParent as HTMLElement).offsetLeft;\n    const offsetTop = pointer.offsetTop + (pointer.offsetParent as HTMLElement).offsetTop;\n    return {\n      offsetLeft,\n      offsetTop,\n    };\n  }\n\n  /**\n   * Create a svg area used for the connection line between the start and end point\n   * the area is rect\n   */\n  private createSvgArea() {\n    const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgElement.innerHTML = `\n    <defs>\n      <marker id=\"markerEndArrow\" viewBox=\"0 0 30 30\" refX=\"9\" refY=\"3\"  markerUnits=\"strokeWidth\" markerWidth=\"30\" markerHeight=\"30\" orient=\"auto\">\n        <path style=\"fill:${this.options.color};opacity:1\" d=\"M0,0 0,6 9,3z\" />\n      </marker>\n    </defs>`;\n    // set svg position\n    // use position attribute to handle with ethe position\n    svgElement.style.position = 'absolute';\n    svgElement.style.zIndex = '-999';\n    svgElement.style.overflow = 'visible';\n\n    const { offsetLeft: startOffsetLeft, offsetTop: startOffsetTop } = this.getTotalOffset(this.startPointer);\n    const { offsetLeft: endOffsetLeft, offsetTop: endOffsetTop } = this.getTotalOffset(this.endPointer);\n\n    switch (this.startPosition) {\n      case StartPositionEnum.horizontalLeftTop:\n      case StartPositionEnum.verticalLeftTop:\n        svgElement.style.left = `${startOffsetLeft}px`;\n        svgElement.style.top = `${startOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalRightTop:\n      case StartPositionEnum.verticalRightTop:\n        svgElement.style.left = `${endOffsetLeft}px`;\n        svgElement.style.top = `${startOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n      case StartPositionEnum.verticalLeftBottom:\n        svgElement.style.left = `${startOffsetLeft}px`;\n        svgElement.style.top = `${endOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n      case StartPositionEnum.verticalRightBottom:\n        svgElement.style.left = `${endOffsetLeft}px`;\n        svgElement.style.top = `${endOffsetTop}px`;\n        break;\n    }\n\n    const width = Math.abs(startOffsetLeft - endOffsetLeft) + this.options.pointerSize;\n    const height = Math.abs(startOffsetTop - endOffsetTop) + this.options.pointerSize;\n    svgElement.setAttribute('width', `${width}px`);\n    svgElement.setAttribute('height', `${height}px`);\n\n    const svgWidth: number = svgElement.width.baseVal.valueInSpecifiedUnits;\n    const svgHeight: number = svgElement.height.baseVal.valueInSpecifiedUnits;\n\n    this.svgParameters = {\n      height: svgHeight,\n      width: svgWidth,\n      leftTop: [this.options.pointerSize / 2, this.options.pointerSize / 2],\n      leftBottom: [this.options.pointerSize / 2, svgHeight - this.options.pointerSize / 2],\n      rightTop: [svgWidth - this.options.pointerSize / 2, this.options.pointerSize / 2],\n      rightBottom: [svgWidth - this.options.pointerSize / 2, svgHeight - this.options.pointerSize / 2],\n    };\n    return svgElement;\n  }\n\n  /**\n   * draw a arrow in the end point position\n   */\n  drawEndArrow() {\n    console.log('base draw end point');\n  }\n\n  drawPath() {\n    let startCoordinate;\n    let endCoordinate;\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n      case StartPositionEnum.horizontalLeftTop:\n        // draw a line from leftTop to rightBottom\n        startCoordinate = this.svgParameters.leftTop;\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n      case StartPositionEnum.horizontalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.verticalRightTop:\n      case StartPositionEnum.horizontalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.verticalRightBottom:\n      case StartPositionEnum.horizontalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        endCoordinate = this.svgParameters.leftTop;\n        break;\n    }\n    const path = createPolyline(this.options);\n    straightPolyline(path, startCoordinate, endCoordinate);\n    path.style.markerEnd = 'url(#markerEndArrow)';\n    this.svgElement.appendChild(path);\n  }\n}\n","import { px2num, num2px } from './utils';\nimport { prefixCls } from './constraints';\nimport { DragOptions } from './connector.model';\n\ninterface Coordinate {\n  xPos: number;\n  yPos: number;\n}\n\nexport class Draggable {\n  elem: HTMLElement;\n  isDragging = false;\n  isCreatingNewConnector = false;\n  dragOptions: DragOptions;\n\n  startCoordinate: Coordinate;\n  elemStartCoordinate: Coordinate;\n\n  constructor(elem: HTMLElement, dragOptions: DragOptions) {\n    this.elem = elem;\n    this.dragOptions = dragOptions || { type: 'straight' };\n    this.makeItDraggable();\n    this.elemStartCoordinate = {\n      xPos: px2num(getComputedStyle(this.elem).left),\n      yPos: px2num(getComputedStyle(this.elem).top),\n    };\n  }\n\n  private makeItDraggable() {\n    this.elem.style.position = 'absolute';\n    this.elem.onmousedown = (event: MouseEvent) => {\n      this.startCoordinate = {\n        xPos: event.clientX,\n        yPos: event.clientY,\n      };\n      this.isDragging = true;\n\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isDragging) {\n          const _diffX = _event.clientX - this.startCoordinate.xPos;\n          const _diffY = _event.clientY - this.startCoordinate.yPos;\n          this.elem.style.left = num2px(this.elemStartCoordinate.xPos + _diffX);\n          this.elem.style.top = num2px(this.elemStartCoordinate.yPos + _diffY);\n          if (typeof this.dragOptions.onDragging === 'function') {\n            this.dragOptions.onDragging();\n          }\n        }\n      };\n\n      document.onmouseup = () => {\n        this.isDragging = false;\n        this.startCoordinate = undefined;\n        // new element position should be set\n        this.elemStartCoordinate = {\n          xPos: px2num(getComputedStyle(this.elem).left),\n          yPos: px2num(getComputedStyle(this.elem).top),\n        };\n\n        document.onmousemove = () => {};\n      };\n    };\n  }\n}\n","import { ConnectorOptions, StartPositionEnum, DrawPath, DrawEndArrow } from './connector.model';\nimport { ConnectorBase } from './connector-base';\nimport { createPolyline, stateMachinePolyLine, createSvgElement } from './utils';\n\nexport class ConnectorFlowchart extends ConnectorBase implements DrawPath, DrawEndArrow {\n  constructor(playground: HTMLElement, startPoint: HTMLElement, endPoint: HTMLElement, options: ConnectorOptions) {\n    super(playground, startPoint, endPoint, options);\n  }\n\n  drawEndArrow() {\n    // half of the arrow's deg, described in radius value\n    const arrowDeg = (45 / 360) * Math.PI;\n\n    const { leftTop, leftBottom, rightTop, rightBottom } = this.svgParameters;\n    const { arrowSize, color } = this.options;\n\n    const arrowPath = createSvgElement('path', {\n      fill: color,\n    });\n    const verticalHandler = (positionValue, factor: 1 | -1) => {\n      arrowPath.setAttributeNS(\n        null,\n        'd',\n        `\n          M${positionValue[0]} ${positionValue[1]}\n          L${positionValue[0] + factor * arrowSize * Math.sin(arrowDeg)}\n           ${positionValue[1] - factor * arrowSize * Math.cos(arrowDeg)}\n          L${positionValue[0]} ${positionValue[1] - factor * arrowSize * 0.6}\n          L${positionValue[0] - factor * arrowSize * Math.sin(arrowDeg)}\n           ${positionValue[1] - factor * arrowSize * Math.cos(arrowDeg)}\n          Z\n        `,\n      );\n    };\n    const horizontalHandler = (positionValue, factor: 1 | -1) => {\n      arrowPath.setAttributeNS(\n        null,\n        'd',\n        `\n          M${positionValue[0]} ${positionValue[1]}\n          L${positionValue[0] - factor * arrowSize * Math.cos(arrowDeg)} ${positionValue[1] +\n          factor * arrowSize * Math.sin(arrowDeg)}\n          L${positionValue[0] - factor * arrowSize * 0.6} ${positionValue[1]}\n          L${positionValue[0] - factor * arrowSize * Math.cos(arrowDeg)} ${positionValue[1] -\n          factor * arrowSize * Math.sin(arrowDeg)}\n          Z\n        `,\n      );\n    };\n\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n        verticalHandler(rightBottom, 1);\n        break;\n      case StartPositionEnum.horizontalLeftTop:\n        horizontalHandler(rightBottom, 1);\n        break;\n      case StartPositionEnum.verticalRightTop:\n        verticalHandler(leftBottom, 1);\n        break;\n      case StartPositionEnum.horizontalRightTop:\n        horizontalHandler(leftBottom, -1);\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n        verticalHandler(rightTop, -1);\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n        horizontalHandler(rightTop, 1);\n        break;\n      case StartPositionEnum.verticalRightBottom:\n        verticalHandler(leftTop, -1);\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n        horizontalHandler(leftTop, -1);\n        break;\n    }\n    this.svgElement.appendChild(arrowPath);\n  }\n\n  drawPath() {\n    const svgWidth: number = this.svgElement.width.baseVal.valueInSpecifiedUnits;\n    const svgHeight: number = this.svgElement.height.baseVal.valueInSpecifiedUnits;\n    let startCoordinate;\n    let middleACoordinate;\n    let middleBCoordinate;\n    let endCoordinate;\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n        startCoordinate = this.svgParameters.leftTop;\n        middleACoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.horizontalLeftTop:\n        startCoordinate = this.svgParameters.leftTop;\n        middleACoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.verticalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        middleACoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.horizontalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        middleACoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        middleACoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        middleACoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.verticalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        middleACoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.leftTop;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        middleACoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.leftTop;\n    }\n\n    const path = createPolyline(this.options);\n    stateMachinePolyLine(path, startCoordinate, middleACoordinate, middleBCoordinate, endCoordinate);\n    this.svgElement.appendChild(path);\n  }\n}\n","import { Draggable } from './draggable';\nimport { DragOptions } from './connector.model';\nimport { prefixCls } from './constraints';\nimport { ConnectorBase } from './connector-base';\nimport { ConnectorFlowchart } from './connector-flowchart';\nimport { addClassIfNotExist, ifOverlapping } from './utils';\n\nconst TYPE_MAP = {\n  undefined: ConnectorBase,\n  straight: ConnectorBase,\n  flowchart: ConnectorFlowchart,\n};\n\nexport class Connectable extends Draggable {\n  playground: HTMLElement;\n  nativeElement: HTMLElement;\n  helperPointer: HTMLElement;\n  onCreatingLine;\n  constructor(playground: HTMLElement, elem: HTMLElement, dragOptions: DragOptions, { onCreatingLine }) {\n    super(elem, dragOptions);\n    this.nativeElement = elem;\n    this.playground = playground;\n    this.onCreatingLine = onCreatingLine;\n    addClassIfNotExist(elem, `${prefixCls}-element`);\n    this.createAnchor();\n  }\n\n  private createAnchor() {\n    const anchor: HTMLElement = document.createElement('div');\n    anchor.classList.add(`${prefixCls}-anchor`);\n    anchor.style.width = '10px';\n    anchor.style.height = '10px';\n    anchor.style.backgroundColor = 'red';\n    anchor.style.position = 'absolute';\n    anchor.style.left = '15px';\n    anchor.style.top = '15px';\n\n    anchor.onmousedown = (event: MouseEvent) => {\n      event.stopPropagation();\n      this.isCreatingNewConnector = true;\n\n      // create a overlay entPointer at the click position\n\n      const x: number = event.pageX - this.playground.offsetLeft;\n      const y: number = event.pageY - this.playground.offsetTop;\n      this.helperPointer = document.createElement('div');\n      this.helperPointer.style.width = '0px';\n      this.helperPointer.style.height = '0px';\n      this.helperPointer.style.backgroundColor = 'blue';\n      this.helperPointer.style.position = 'absolute';\n      this.helperPointer.style.left = `${x}px`;\n      this.helperPointer.style.top = `${y}px`;\n      this.playground.appendChild(this.helperPointer);\n      const a = new TYPE_MAP[this.dragOptions.type](this.playground, this.elem, this.helperPointer, this.dragOptions);\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isCreatingNewConnector) {\n          this.helperPointer.style.left = `${_event.pageX - this.playground.offsetLeft}px`;\n          this.helperPointer.style.top = `${_event.pageY - this.playground.offsetTop}px`;\n          if (a) {\n            a.renderLine();\n          }\n        }\n      };\n      document.onmouseup = (_upEvent: MouseEvent) => {\n        this.isCreatingNewConnector = false;\n        const elementMouseIsOver = document.elementsFromPoint(_upEvent.clientX, _upEvent.clientY);\n        const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n        a.dispose();\n        if (targetElements.length > 0) {\n          this.onCreatingLine(targetElements[0]);\n        }\n        if (this.helperPointer) {\n          this.playground.removeChild(this.helperPointer);\n          this.helperPointer = undefined;\n        }\n      };\n    };\n\n    this.elem.appendChild(anchor);\n  }\n}\n","import { DomConnection, EasyConnectionOptions } from './connector.model';\nimport { ConnectorBase } from './connector-base';\nimport { Connectable } from './connectable';\nimport { ConnectorFlowchart } from './connector-flowchart';\nimport { ifOverlapping } from './utils';\n\ninterface ElementConnectionsMap {\n  [a: string]: Array<ConnectorBase>;\n}\n\nconst TYPE_MAP = {\n  undefined: ConnectorBase,\n  straight: ConnectorBase,\n  flowchart: ConnectorFlowchart,\n};\n\nexport class EasyConnection {\n  playground: HTMLElement;\n  options: EasyConnectionOptions;\n  connectableElements: Connectable[] = [];\n  connections: ConnectorBase[] = [];\n\n  elementConnectionsMap: ElementConnectionsMap = {};\n\n  constructor(\n    playground: HTMLElement,\n    elements: HTMLElement[] = [],\n    connections: DomConnection[] = [],\n    options: EasyConnectionOptions = { type: 'straight' },\n  ) {\n    this.playground = playground;\n    this.options = options;\n    // set the playground to position relative\n    // init the connections\n    for (const elem of elements) {\n      this.elementConnectionsMap[elem.id] = [];\n    }\n    for (const con of connections) {\n      const connectionInstance = new TYPE_MAP[options.type](playground, con.start, con.end, options);\n      this.elementConnectionsMap[con.start.id].push(connectionInstance);\n      this.elementConnectionsMap[con.end.id].push(connectionInstance);\n      this.connections.push(connectionInstance);\n    }\n    for (const elem of elements) {\n      this.connectableElements.push(\n        new Connectable(\n          playground,\n          elem,\n          {\n            ...options,\n            onDragging: () => {\n              // all lines connected to this element should be reRendered\n              this.elementConnectionsMap[elem.id].forEach(i => i.renderLine());\n            },\n          },\n          {\n            onCreatingLine: (targetElem: HTMLElement) => {\n              this.addConnection({\n                start: elem,\n                end: targetElem,\n              });\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  addElement(elem: HTMLElement): void {\n    this.elementConnectionsMap[elem.id] = [];\n    this.playground.appendChild(elem);\n    this.connectableElements.push(\n      new Connectable(\n        this.playground,\n        elem,\n        {\n          ...this.options,\n          onDragging: () => {\n            // all lines connected to this element should be reRendered\n            this.elementConnectionsMap[elem.id].forEach(i => i.renderLine());\n          },\n        },\n        {\n          onCreatingLine: (targetElem: HTMLElement) => {\n            this.addConnection({\n              start: elem,\n              end: targetElem,\n            });\n          },\n        },\n      ),\n    );\n  }\n  addConnection(connection: DomConnection): void {\n    const connectionInstance = new TYPE_MAP[this.options.type](\n      this.playground,\n      connection.start,\n      connection.end,\n      this.options,\n    );\n    this.elementConnectionsMap[connection.start.id].push(connectionInstance);\n    this.elementConnectionsMap[connection.end.id].push(connectionInstance);\n    this.connections.push(connectionInstance);\n  }\n}\n"],"names":["StartPositionEnum","prefixCls","createSvgElement","label","styleMap","elem","document","createElementNS","Object","keys","forEach","key","setAttributeNS","createPolyline","options","polyline","color","strokeWidth","straightPolyline","polyLine","start","end","toString","stateMachinePolyLine","midA","midB","px2num","pxVal","slice","length","num2px","numVal","addClassIfNotExist","cls","classes","Array","isArray","c","classList","contains","add","ConnectorBase","res","createConnectPoint","startElement","endElement","startPointer","endPointer","playground","removeChild","svgElement","createSvgArea","drawEndArrow","drawPath","appendChild","pointerSize","arrowSize","createElement","style","position","backgroundColor","width","height","xDistance","offsetLeft","yDistance","offsetTop","Math","abs","startPosition","horizontalLeftTop","horizontalLeftBottom","horizontalRightTop","horizontalRightBottom","verticalLeftTop","verticalLeftBottom","verticalRightTop","verticalRightBottom","left","getBoundingClientRect","top","pointer","offsetParent","innerHTML","zIndex","overflow","getTotalOffset","startOffsetLeft","startOffsetTop","endOffsetLeft","endOffsetTop","setAttribute","svgWidth","baseVal","valueInSpecifiedUnits","svgHeight","svgParameters","leftTop","leftBottom","rightTop","rightBottom","console","log","startCoordinate","endCoordinate","path","markerEnd","Draggable","dragOptions","isDragging","isCreatingNewConnector","type","makeItDraggable","elemStartCoordinate","xPos","getComputedStyle","yPos","onmousedown","event","clientX","clientY","onmousemove","_event","_diffX","_diffY","onDragging","onmouseup","undefined","ConnectorFlowchart","startPoint","endPoint","arrowDeg","PI","arrowPath","fill","verticalHandler","positionValue","factor","sin","cos","horizontalHandler","middleACoordinate","middleBCoordinate","TYPE_MAP","straight","flowchart","Connectable","onCreatingLine","nativeElement","createAnchor","anchor","stopPropagation","x","pageX","y","pageY","helperPointer","a","renderLine","_upEvent","elementMouseIsOver","elementsFromPoint","targetElements","filter","i","dispose","EasyConnection","elements","connections","connectableElements","elementConnectionsMap","id","con","connectionInstance","push","targetElem","addConnection","connection"],"mappings":"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"}