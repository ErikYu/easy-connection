{"version":3,"file":"index.js","sources":["../../src/connector.model.ts","../../src/utils.ts","../../src/constraints.ts","../../src/helpers/element-position-helper.ts","../../src/connector.ts","../../src/connector-base.ts","../../src/draggable.ts","../../src/connector-flowchart.ts","../../src/connectable.ts","../../src/connection.ts"],"sourcesContent":["// The preset position of the ConnectorPointer\n// `vertical` contains `bottom` & `top`\n// `horizontal` contains `left` & `right`\n// When `auto`, the position will change according to the relative position\n// The default value is `auto`\nexport type ConnectorPointerPosition = 'vertical' | 'horizontal' | 'auto';\nexport type ConnectionType = 'stateMachine' | 'straight';\n\ntype PromiseOr<T> = Promise<T> | T;\n\nexport interface ConnectorOptions {\n  pointerSize?: number;\n  strokeWidth?: number;\n  color?: string;\n\n  // When mouseover the connection, the line's color changes into `hoverColor`\n  hoverColor?: string;\n  arrowSize?: number;\n\n  // The connect-pointer's position\n  pointerPosition?: ConnectorPointerPosition;\n}\n\nexport interface EasyConnectionOptions extends ConnectorOptions {\n  type: ConnectionType;\n}\n\nexport enum StartPositionEnum {\n  horizontalLeftTop,\n  horizontalLeftBottom,\n  horizontalRightTop,\n  horizontalRightBottom,\n  verticalLeftTop,\n  verticalLeftBottom,\n  verticalRightTop,\n  verticalRightBottom,\n}\n\nexport interface SvgCanvasParameters {\n  height: number;\n  width: number;\n  leftTop: number[];\n  leftBottom: number[];\n  rightTop: number[];\n  rightBottom: number[];\n}\n\nexport interface DrawPath {\n  drawPath: () => void;\n}\n\nexport interface DrawEndArrow {\n  drawEndArrow: () => void;\n}\n\nexport interface DragOptions extends ConnectorOptions {\n  type: ConnectionType;\n  // TODO\n  onBeforeDrag?: () => PromiseOr<boolean>;\n\n  onDragging?: () => void;\n}\n\nexport interface DomConnection {\n  start: HTMLElement;\n  end: HTMLElement;\n}\n","import { ConnectorOptions } from './connector.model';\n\ninterface IndexedObject {\n  [a: string]: string;\n}\n\ninterface PolylineEvents {\n  onmouseenter?: (event: MouseEvent) => void;\n  onmouseleave?: (event: MouseEvent) => void;\n  onmousedown?: (event: MouseEvent) => void;\n}\n\ntype svgElement = 'path' | 'polyline';\n\nexport function createSvgElement(label: svgElement, styleMap: IndexedObject) {\n  const elem = document.createElementNS('http://www.w3.org/2000/svg', label);\n  Object.keys(styleMap).forEach(key => {\n    elem.setAttributeNS(null, key, styleMap[key]);\n  });\n  return elem;\n}\n\nexport function createPolyline(\n  options: ConnectorOptions,\n  { onmouseenter, onmouseleave, onmousedown }: PolylineEvents,\n): SVGPolylineElement {\n  const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');\n  polyline.setAttributeNS(null, 'fill', 'none');\n  polyline.setAttributeNS(null, 'stroke', `${options.color}`);\n  polyline.setAttributeNS(null, 'stroke-width', `${options.strokeWidth}`);\n  polyline.onmouseenter = onmouseenter;\n  polyline.onmouseleave = onmouseleave;\n  polyline.onmousedown = onmousedown;\n  return polyline;\n}\n\nexport function straightPolyline(polyLine: SVGPolylineElement, start: number[], end: number[]) {\n  polyLine.setAttributeNS(null, 'points', `${start.toString()} ${end.toString()}`);\n}\n\nexport function stateMachinePolyLine(\n  polyLine: SVGPolylineElement,\n  start: number[],\n  midA: number[],\n  midB: number[],\n  end: number[],\n) {\n  polyLine.setAttributeNS(\n    null,\n    'points',\n    `${start.toString()} ${midA.toString()} ${midB.toString()} ${end.toString()}`,\n  );\n}\n\nexport function px2num(pxVal: string): number {\n  return +pxVal.slice(0, pxVal.length - 2);\n}\n\nexport function num2px(numVal: number): string {\n  return `${numVal}px`;\n}\n\n/**\n * add class names for a html element, when the element already has the className, skip\n * @param elem target html element\n * @param cls classNames or className\n */\nexport function addClassIfNotExist(elem: Element, cls: string[] | string): void {\n  const classes = Array.isArray(cls) ? cls : [cls];\n  for (const c of classes) {\n    if (!elem.classList.contains(c)) {\n      elem.classList.add(c);\n    }\n  }\n}\n\nexport function removeClass(elem: Element | Element[], cls: string[] | string): void {\n  const classes = Array.isArray(cls) ? cls : [cls];\n  const elements = Array.isArray(elem) ? elem : [elem];\n  for (const e of elements) {\n    for (const c of classes) {\n      e.classList.remove(c);\n    }\n  }\n}\n\n/**\n * Check if two HTML elements is Overlapping one by one\n * @param elemA first element\n * @param elemB second element\n */\nexport function ifOverlapping(elemA, elemB): boolean {\n  const rect1 = elemA.getBoundingClientRect();\n  const rect2 = elemB.getBoundingClientRect();\n  return !(\n    rect1.right < rect2.left ||\n    rect1.left > rect2.right ||\n    rect1.bottom < rect2.top ||\n    rect1.top > rect2.bottom\n  );\n}\n\nexport function setStyle(elem: HTMLElement, style: Partial<CSSStyleDeclaration>) {\n  Object.keys(style).forEach(key => {\n    elem.style[key] = style[key];\n  });\n}\n","export const prefixCls = 'cnt';\n","import { ConnectorPointerPosition, StartPositionEnum } from '../connector.model';\n\nfunction _horizontalHandler(xDistance: number, yDistance: number): StartPositionEnum {\n  if (xDistance <= 0 && yDistance <= 0) {\n    return StartPositionEnum.horizontalLeftTop;\n  } else if (xDistance <= 0 && yDistance > 0) {\n    return StartPositionEnum.horizontalLeftBottom;\n  } else if (xDistance > 0 && yDistance <= 0) {\n    return StartPositionEnum.horizontalRightTop;\n  } else {\n    return StartPositionEnum.horizontalRightBottom;\n  }\n}\n\nfunction _verticalHandler(xDistance: number, yDistance: number): StartPositionEnum {\n  if (xDistance <= 0 && yDistance <= 0) {\n    return StartPositionEnum.verticalLeftTop;\n  } else if (xDistance <= 0 && yDistance > 0) {\n    return StartPositionEnum.verticalLeftBottom;\n  } else if (xDistance > 0 && yDistance <= 0) {\n    return StartPositionEnum.verticalRightTop;\n  } else {\n    return StartPositionEnum.verticalRightBottom;\n  }\n}\n\nfunction getStartPosition(\n  xDistance: number,\n  yDistance: number,\n  pointerPosition: ConnectorPointerPosition,\n): StartPositionEnum {\n  switch (pointerPosition) {\n    case 'auto':\n      return Math.abs(xDistance) >= Math.abs(yDistance)\n        ? _horizontalHandler(xDistance, yDistance)\n        : _verticalHandler(xDistance, yDistance);\n    case 'horizontal':\n      return _horizontalHandler(xDistance, yDistance);\n    case 'vertical':\n    default:\n      return _verticalHandler(xDistance, yDistance);\n  }\n}\n\nexport { getStartPosition };\n","import { ConnectorOptions, StartPositionEnum, SvgCanvasParameters } from './connector.model';\nimport { addClassIfNotExist, removeClass, setStyle } from './utils';\nimport { prefixCls } from './constraints';\nimport { ConnectorPoint } from './connector-point';\n\nimport { getStartPosition } from './helpers/element-position-helper';\n\n/**\n * The root class of connection\n */\nexport abstract class Connector {\n  options: ConnectorOptions;\n\n  // The container of the zone, every thing is on it\n  playground: HTMLElement;\n\n  // The start HTMLElement of the connection\n  startElement: HTMLElement;\n\n  // The end HTMLElement of the connection\n  endElement: HTMLElement;\n\n  // The element that attached on the start/end element\n  // usually, there will be 4 most on each element, one at each side\n  startPointer: ConnectorPoint;\n  endPointer: ConnectorPoint;\n\n  // describes where the start element is related to the end element\n  startPosition: StartPositionEnum;\n\n  // the svg container, each connector has one svg\n  svgElement: SVGSVGElement;\n  svgParameters: SvgCanvasParameters;\n\n  isMoving = false;\n  helperPointer: HTMLElement;\n\n  /**\n   * @param playground start connector\n   * @param startElement start connector\n   * @param endElement end connector\n   * @param options end connector\n   */\n  protected constructor(\n    playground: HTMLElement,\n    startElement: HTMLElement,\n    endElement: HTMLElement,\n    options: ConnectorOptions,\n  ) {\n    this.options = options;\n    this.startElement = startElement;\n    this.endElement = endElement;\n    addClassIfNotExist(startElement, `${prefixCls}-element`);\n    addClassIfNotExist(endElement, `${prefixCls}-element`);\n    this.playground = playground;\n\n    // find the connect point that used in each element\n    const res = this.createConnectPoint(this.startElement, this.endElement);\n    this.startPointer = res.start;\n    this.endPointer = res.end;\n    addClassIfNotExist(this.startPointer, `${prefixCls}-pointer`);\n    addClassIfNotExist(this.endPointer, `${prefixCls}-pointer`);\n\n    // create a svg area between start and end\n    this.svgElement = this.createSvgArea();\n    this.drawPath();\n    this.playground.appendChild(this.svgElement);\n  }\n\n  /**\n   * Remove and render the svg part\n   * TODO: more efficient way should be used here\n   */\n  public renderLine() {\n    const res = this.createConnectPoint(this.startElement, this.endElement);\n    this.startPointer = res.start;\n    this.endPointer = res.end;\n    addClassIfNotExist(this.startPointer, `${prefixCls}-pointer`);\n    addClassIfNotExist(this.endPointer, `${prefixCls}-pointer`);\n    this.playground.removeChild(this.svgElement);\n    this.svgElement = this.createSvgArea();\n    this.drawPath();\n    this.playground.appendChild(this.svgElement);\n  }\n\n  /**\n   * remove the whole svg part and the connect pointer\n   */\n  public dispose() {\n    if (this.startElement && this.startPointer) {\n      this.startElement.removeChild(this.startPointer);\n    }\n    if (this.endElement && this.endPointer) {\n      this.endElement.removeChild(this.endPointer);\n    }\n    this.playground.removeChild(this.svgElement);\n  }\n\n  abstract drawPath(): void;\n\n  private createConnectPoint(startElement: HTMLElement, endElement: HTMLElement) {\n    if (!!this.startPointer) {\n      startElement.removeChild(this.startPointer);\n    }\n    if (!!this.endPointer) {\n      endElement.removeChild(this.endPointer);\n    }\n    // calc the absolute distance between two elements\n    // should notice that the area depends on the endElement position related to the start element\n    const startPointer = document.createElement('div');\n    const endPointer = document.createElement('div');\n\n    startPointer.style.position = 'absolute';\n    endPointer.style.position = 'absolute';\n    startPointer.style.backgroundColor = '#000000';\n    endPointer.style.backgroundColor = '#000000';\n    startPointer.style.width = `${this.options.pointerSize}px`;\n    endPointer.style.width = `${this.options.pointerSize}px`;\n    startPointer.style.height = `${this.options.pointerSize}px`;\n    endPointer.style.height = `${this.options.pointerSize}px`;\n\n    const xDistance = startElement.offsetLeft - endElement.offsetLeft;\n    const yDistance = startElement.offsetTop - endElement.offsetTop;\n\n    this.startPosition = getStartPosition(xDistance, yDistance, this.options.pointerPosition);\n\n    switch (this.startPosition) {\n      case StartPositionEnum.horizontalLeftTop:\n      case StartPositionEnum.horizontalLeftBottom:\n        startPointer.style.left = `${startElement.getBoundingClientRect().width}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.left = `${-this.options.pointerSize}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n      case StartPositionEnum.horizontalRightTop:\n        startPointer.style.left = `${-this.options.pointerSize}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        break;\n      case StartPositionEnum.verticalLeftTop:\n      case StartPositionEnum.verticalRightTop:\n        // startElem -> bottom\n        // endElem   -> top\n        startPointer.style.left = `${startElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.top = `${-this.options.pointerSize}px`;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n      case StartPositionEnum.verticalRightBottom:\n        // startElem -> top\n        // endElem   -> bottom\n        startPointer.style.left = `${startElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        startPointer.style.top = `-${this.options.pointerSize}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height}px`;\n        break;\n    }\n\n    startElement.appendChild(startPointer);\n    endElement.appendChild(endPointer);\n    return {\n      start: (startPointer as unknown) as ConnectorPoint,\n      end: (endPointer as unknown) as ConnectorPoint,\n    };\n  }\n\n  /**\n   * Create a svg area used for the connection line between the start and end point\n   * the area is rect\n   */\n  private createSvgArea() {\n    const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgElement.innerHTML = `\n    <defs>\n      <marker id=\"markerEndArrow\" viewBox=\"0 0 30 30\" refX=\"9\" refY=\"3\"  markerUnits=\"strokeWidth\" markerWidth=\"30\" markerHeight=\"30\" orient=\"auto\">\n        <path style=\"fill:${this.options.color};opacity:1\" d=\"M0,0 0,6 9,3z\" />\n      </marker>\n    </defs>`;\n    // set svg position\n    // use position attribute to handle with ethe position\n    svgElement.style.position = 'absolute';\n    svgElement.style.zIndex = '999';\n    svgElement.style.overflow = 'visible';\n\n    const { offsetLeft: startOffsetLeft, offsetTop: startOffsetTop } = this.getTotalOffset(this.startPointer);\n    const { offsetLeft: endOffsetLeft, offsetTop: endOffsetTop } = this.getTotalOffset(this.endPointer);\n\n    switch (this.startPosition) {\n      case StartPositionEnum.horizontalLeftTop:\n      case StartPositionEnum.verticalLeftTop:\n        svgElement.style.left = `${startOffsetLeft}px`;\n        svgElement.style.top = `${startOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalRightTop:\n      case StartPositionEnum.verticalRightTop:\n        svgElement.style.left = `${endOffsetLeft}px`;\n        svgElement.style.top = `${startOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n      case StartPositionEnum.verticalLeftBottom:\n        svgElement.style.left = `${startOffsetLeft}px`;\n        svgElement.style.top = `${endOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n      case StartPositionEnum.verticalRightBottom:\n        svgElement.style.left = `${endOffsetLeft}px`;\n        svgElement.style.top = `${endOffsetTop}px`;\n        break;\n    }\n\n    const width = Math.abs(startOffsetLeft - endOffsetLeft) + this.options.pointerSize;\n    const height = Math.abs(startOffsetTop - endOffsetTop) + this.options.pointerSize;\n    svgElement.setAttribute('width', `${width}px`);\n    svgElement.setAttribute('height', `${height}px`);\n\n    const svgWidth: number = svgElement.width.baseVal.valueInSpecifiedUnits;\n    const svgHeight: number = svgElement.height.baseVal.valueInSpecifiedUnits;\n\n    this.svgParameters = {\n      height: svgHeight,\n      width: svgWidth,\n      leftTop: [this.options.pointerSize / 2, this.options.pointerSize / 2],\n      leftBottom: [this.options.pointerSize / 2, svgHeight - this.options.pointerSize / 2],\n      rightTop: [svgWidth - this.options.pointerSize / 2, this.options.pointerSize / 2],\n      rightBottom: [svgWidth - this.options.pointerSize / 2, svgHeight - this.options.pointerSize / 2],\n    };\n    return svgElement;\n  }\n\n  getTotalOffset(pointer: ConnectorPoint) {\n    const offsetLeft = pointer.offsetLeft + (pointer.offsetParent as HTMLElement).offsetLeft;\n    const offsetTop = pointer.offsetTop + (pointer.offsetParent as HTMLElement).offsetTop;\n    return {\n      offsetLeft,\n      offsetTop,\n    };\n  }\n\n  private checkIfMouseEventOnArrow(event: MouseEvent): boolean {\n    const isNear = (a, b) => Math.abs(a - b) < 50;\n    const { offsetX, offsetY } = event;\n    const mapping = {\n      [StartPositionEnum.horizontalLeftTop]: 'rightBottom',\n      [StartPositionEnum.verticalLeftTop]: 'rightBottom',\n    };\n    const [arrowX, arrowY] = this.svgParameters[mapping[this.startPosition]];\n    return isNear(offsetX, arrowX) && isNear(offsetY, arrowY);\n  }\n\n  // Functions that can be inherited or override\n  // Used for the children classes, ep: ConnectorBase, ConnectorFlowchart...\n\n  /**\n   * When mouse move into the connection, the hover color shall be changed\n   * @param event: MouseEvent\n   */\n  onmouseenter = (event: MouseEvent) => {\n    const polyline = event.target as HTMLElement;\n    const hoverColor = this.options.hoverColor || this.options.color;\n    polyline.style.stroke = hoverColor;\n    this.svgElement.getElementById('markerEndArrow').getElementsByTagName('path')[0].style.fill = hoverColor;\n    // tslint:disable-next-line: Unnecessary semicolon\n  };\n\n  /**\n   * When mouse move leave the connection, the hover color shall be changed\n   * @param event: MouseEvent\n   */\n  onmouseleave = (event: MouseEvent) => {\n    (event.target as HTMLElement).style.stroke = this.options.color;\n    this.svgElement.getElementById('markerEndArrow').getElementsByTagName('path')[0].style.fill = this.options.color;\n    // tslint:disable-next-line: Unnecessary semicolon\n  };\n\n  /**\n   * While mousedown on then endArrow, the connection should start moving\n   * We can modify the connection to other elements or just destroy the element\n   * @param event: MouseEvent\n   */\n  onmousedown = (event: MouseEvent) => {\n    const isOnArrow = this.checkIfMouseEventOnArrow(event);\n    if (isOnArrow) {\n      // this connection should be removed and temp lines should be created\n      // build a helper pointer and connect it with the helper point\n      this.isMoving = true;\n      const helperPointOffset = 3;\n      const x: number = event.pageX - this.playground.offsetLeft;\n      const y: number = event.pageY - this.playground.offsetTop;\n      this.helperPointer = document.createElement('div');\n      setStyle(this.helperPointer, {\n        width: '0px',\n        height: '0px',\n        position: 'absolute',\n        left: `${x - helperPointOffset}px`,\n        top: `${y - helperPointOffset}px`,\n      });\n      this.playground.appendChild(this.helperPointer);\n      this.endElement = this.helperPointer;\n      this.endPointer = undefined;\n      // reconnect\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isMoving) {\n          this.helperPointer.style.left = `${_event.pageX - this.playground.offsetLeft - helperPointOffset}px`;\n          this.helperPointer.style.top = `${_event.pageY - this.playground.offsetTop - helperPointOffset}px`;\n          this.renderLine();\n          const elementMouseIsOver = document.elementsFromPoint(_event.clientX, _event.clientY);\n          const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n\n          const allElements = this.playground.getElementsByClassName(`${prefixCls}-element`);\n          if (targetElements.length > 0) {\n            addClassIfNotExist(targetElements[0], `${prefixCls}-will`);\n            // others should be deleted\n            removeClass(Array.from(allElements).filter(i => i !== targetElements[0]), `${prefixCls}-will`);\n          } else {\n            removeClass(Array.from(allElements), `${prefixCls}-will`);\n          }\n        }\n      };\n\n      // TODO: many optimize\n      document.onmouseup = (_upEvent: MouseEvent) => {\n        this.isMoving = false;\n        const elementMouseIsOver = document.elementsFromPoint(_upEvent.clientX, _upEvent.clientY);\n        const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n        if (targetElements.length > 0) {\n          this.endElement = targetElements[0] as HTMLElement;\n          this.endPointer = undefined;\n          this.renderLine();\n          removeClass(targetElements[0], `${prefixCls}-will`);\n        } else {\n          this.dispose();\n        }\n        if (this.helperPointer) {\n          this.playground.removeChild(this.helperPointer);\n          this.helperPointer = undefined;\n        }\n      };\n    }\n    // tslint:disable-next-line: Unnecessary semicolon\n  };\n}\n","import { ConnectorOptions, StartPositionEnum, SvgCanvasParameters } from './connector.model';\nimport { prefixCls } from './constraints';\nimport { ConnectorPoint } from './connector-point';\nimport { addClassIfNotExist, createPolyline, removeClass, setStyle, straightPolyline } from './utils';\nimport { Connector } from './connector';\n\nexport class ConnectorBase extends Connector {\n  startPosition: StartPositionEnum;\n\n  // whether the user is moving the arrow\n  isModifyingConnector = false;\n\n  constructor(playground: HTMLElement, startElement: HTMLElement, endElement: HTMLElement, options: ConnectorOptions) {\n    super(playground, startElement, endElement, options);\n  }\n\n  drawPath() {\n    let startCoordinate;\n    let endCoordinate;\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n      case StartPositionEnum.horizontalLeftTop:\n        // draw a line from leftTop to rightBottom\n        startCoordinate = this.svgParameters.leftTop;\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n      case StartPositionEnum.horizontalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.verticalRightTop:\n      case StartPositionEnum.horizontalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.verticalRightBottom:\n      case StartPositionEnum.horizontalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        endCoordinate = this.svgParameters.leftTop;\n        break;\n    }\n    const path = createPolyline(this.options, {\n      onmouseenter: this.onmouseenter,\n      onmouseleave: this.onmouseleave,\n      onmousedown: this.onmousedown,\n    });\n    straightPolyline(path, startCoordinate, endCoordinate);\n    path.style.markerEnd = 'url(#markerEndArrow)';\n    this.svgElement.appendChild(path);\n  }\n}\n","import { px2num, num2px } from './utils';\nimport { prefixCls } from './constraints';\nimport { DragOptions } from './connector.model';\n\ninterface Coordinate {\n  xPos: number;\n  yPos: number;\n}\n\nexport class Draggable {\n  elem: HTMLElement;\n  isDragging = false;\n  dragOptions: DragOptions;\n\n  startCoordinate: Coordinate;\n  elemStartCoordinate: Coordinate;\n\n  constructor(elem: HTMLElement, dragOptions: DragOptions) {\n    this.elem = elem;\n    this.dragOptions = dragOptions || { type: 'straight' };\n    this.makeItDraggable();\n    this.elemStartCoordinate = {\n      xPos: px2num(getComputedStyle(this.elem).left),\n      yPos: px2num(getComputedStyle(this.elem).top),\n    };\n  }\n\n  private makeItDraggable() {\n    this.elem.style.position = 'absolute';\n    this.elem.onmousedown = (event: MouseEvent) => {\n      this.startCoordinate = {\n        xPos: event.clientX,\n        yPos: event.clientY,\n      };\n      this.isDragging = true;\n\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isDragging) {\n          const _diffX = _event.clientX - this.startCoordinate.xPos;\n          const _diffY = _event.clientY - this.startCoordinate.yPos;\n          this.elem.style.left = num2px(this.elemStartCoordinate.xPos + _diffX);\n          this.elem.style.top = num2px(this.elemStartCoordinate.yPos + _diffY);\n          if (typeof this.dragOptions.onDragging === 'function') {\n            this.dragOptions.onDragging();\n          }\n        }\n      };\n\n      document.onmouseup = () => {\n        this.isDragging = false;\n        this.startCoordinate = undefined;\n        // new element position should be set\n        this.elemStartCoordinate = {\n          xPos: px2num(getComputedStyle(this.elem).left),\n          yPos: px2num(getComputedStyle(this.elem).top),\n        };\n\n        document.onmousemove = () => {};\n      };\n    };\n  }\n}\n","import { ConnectorOptions, StartPositionEnum, DrawPath } from './connector.model';\nimport { createPolyline, stateMachinePolyLine } from './utils';\nimport { Connector } from './connector';\n\nexport class ConnectorFlowchart extends Connector implements DrawPath {\n  constructor(playground: HTMLElement, startPoint: HTMLElement, endPoint: HTMLElement, options: ConnectorOptions) {\n    super(playground, startPoint, endPoint, options);\n  }\n\n  drawPath() {\n    const svgWidth: number = this.svgElement.width.baseVal.valueInSpecifiedUnits;\n    const svgHeight: number = this.svgElement.height.baseVal.valueInSpecifiedUnits;\n    let startCoordinate;\n    let middleACoordinate;\n    let middleBCoordinate;\n    let endCoordinate;\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n        startCoordinate = this.svgParameters.leftTop;\n        middleACoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.horizontalLeftTop:\n        startCoordinate = this.svgParameters.leftTop;\n        middleACoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.verticalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        middleACoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.horizontalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        middleACoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        middleACoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        middleACoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.verticalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        middleACoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.leftTop;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        middleACoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.leftTop;\n    }\n\n    const path = createPolyline(this.options, {\n      onmouseenter: this.onmouseenter,\n      onmouseleave: this.onmouseleave,\n      onmousedown: this.onmousedown,\n    });\n    stateMachinePolyLine(path, startCoordinate, middleACoordinate, middleBCoordinate, endCoordinate);\n    path.style.markerEnd = 'url(#markerEndArrow)';\n    this.svgElement.appendChild(path);\n  }\n}\n","import { Draggable } from './draggable';\nimport { DragOptions } from './connector.model';\nimport { prefixCls } from './constraints';\nimport { ConnectorBase } from './connector-base';\nimport { ConnectorFlowchart } from './connector-flowchart';\nimport { addClassIfNotExist, ifOverlapping, removeClass, setStyle } from './utils';\n\nconst TYPE_MAP = {\n  undefined: ConnectorBase,\n  straight: ConnectorBase,\n  flowchart: ConnectorFlowchart,\n};\n\nexport class Connectable extends Draggable {\n  playground: HTMLElement;\n  nativeElement: HTMLElement;\n  helperPointer: HTMLElement;\n  isCreatingNewConnector = false;\n  onCreatingLine;\n  constructor(playground: HTMLElement, elem: HTMLElement, dragOptions: DragOptions, { onCreatingLine }) {\n    super(elem, dragOptions);\n    this.nativeElement = elem;\n    setStyle(elem, {\n      zIndex: '2',\n    });\n    this.playground = playground;\n    this.onCreatingLine = onCreatingLine;\n    addClassIfNotExist(elem, `${prefixCls}-element`);\n    this.createAnchor();\n  }\n\n  private createAnchor() {\n    const anchor: HTMLElement = document.createElement('div');\n    anchor.classList.add(`${prefixCls}-anchor`);\n    setStyle(anchor, {\n      width: '10px',\n      height: '10px',\n      backgroundColor: 'red',\n      position: 'absolute',\n      left: '15px',\n      top: '15px',\n    });\n\n    // while anchor press down\n    // a new connection will be created\n    anchor.onmousedown = (event: MouseEvent) => {\n      event.stopPropagation();\n      this.isCreatingNewConnector = true;\n\n      // create a overlay entPointer at the click position\n\n      // if offset is 0, the pointer will always hover the helper point instead of the other element\n      const helperPointOffset = 3;\n\n      const x: number = event.pageX - this.playground.offsetLeft;\n      const y: number = event.pageY - this.playground.offsetTop;\n      this.helperPointer = document.createElement('div');\n      setStyle(this.helperPointer, {\n        width: '0px',\n        height: '0px',\n        position: 'absolute',\n        left: `${x - helperPointOffset}px`,\n        top: `${y - helperPointOffset}px`,\n      });\n      this.playground.appendChild(this.helperPointer);\n      let _newConnection = new TYPE_MAP[this.dragOptions.type](\n        this.playground,\n        this.elem,\n        this.helperPointer,\n        this.dragOptions,\n      );\n\n      // TODO: onmousemove and onmouseup's listener should be removed after onmouseup\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isCreatingNewConnector) {\n          this.helperPointer.style.left = `${_event.pageX - this.playground.offsetLeft - helperPointOffset}px`;\n          this.helperPointer.style.top = `${_event.pageY - this.playground.offsetTop - helperPointOffset}px`;\n          if (_newConnection) {\n            _newConnection.renderLine();\n          }\n          const elementMouseIsOver = document.elementsFromPoint(_event.clientX, _event.clientY);\n          const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n\n          const allElements = this.playground.getElementsByClassName(`${prefixCls}-element`);\n          if (targetElements.length > 0) {\n            addClassIfNotExist(targetElements[0], `${prefixCls}-will`);\n            // others should be deleted\n            removeClass(Array.from(allElements).filter(i => i !== targetElements[0]), `${prefixCls}-will`);\n          } else {\n            removeClass(Array.from(allElements), `${prefixCls}-will`);\n          }\n        }\n      };\n      document.onmouseup = (_upEvent: MouseEvent) => {\n        this.isCreatingNewConnector = false;\n        const elementMouseIsOver = document.elementsFromPoint(_upEvent.clientX, _upEvent.clientY);\n        const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n        if (_newConnection) {\n          _newConnection.dispose();\n          _newConnection = null;\n        }\n        if (targetElements.length > 0) {\n          this.onCreatingLine(targetElements[0]);\n          removeClass(targetElements[0], `${prefixCls}-will`);\n        }\n        if (this.helperPointer) {\n          this.playground.removeChild(this.helperPointer);\n          this.helperPointer = undefined;\n        }\n      };\n    };\n\n    this.elem.appendChild(anchor);\n  }\n}\n","import { DomConnection, EasyConnectionOptions } from './connector.model';\nimport { ConnectorBase } from './connector-base';\nimport { Connectable } from './connectable';\nimport { ConnectorFlowchart } from './connector-flowchart';\nimport { ifOverlapping } from './utils';\n\ninterface ElementConnectionsMap {\n  [a: string]: Array<ConnectorBase>;\n}\n\nconst TYPE_MAP = {\n  undefined: ConnectorBase,\n  straight: ConnectorBase,\n  flowchart: ConnectorFlowchart,\n};\n\nexport class EasyConnection {\n  playground: HTMLElement;\n  options: EasyConnectionOptions;\n  connectableElements: Connectable[] = [];\n  connections: ConnectorBase[] = [];\n\n  elementConnectionsMap: ElementConnectionsMap = {};\n\n  constructor(\n    playground: HTMLElement,\n    elements: HTMLElement[] = [],\n    connections: DomConnection[] = [],\n    options: EasyConnectionOptions = { type: 'straight' },\n  ) {\n    this.playground = playground;\n    this.options = {\n      color: '#cccccc',\n      hoverColor: 'red',\n      pointerPosition: 'auto',\n      pointerSize: 4,\n      strokeWidth: 1,\n      arrowSize: 15,\n      ...options,\n    };\n    // set the playground to position relative\n    // init the connections\n    for (const elem of elements) {\n      this.elementConnectionsMap[elem.id] = [];\n    }\n    for (const con of connections) {\n      const connectionInstance = new TYPE_MAP[options.type](playground, con.start, con.end, this.options);\n      this.elementConnectionsMap[con.start.id].push(connectionInstance);\n      this.elementConnectionsMap[con.end.id].push(connectionInstance);\n      this.connections.push(connectionInstance);\n    }\n    for (const elem of elements) {\n      this.connectableElements.push(\n        new Connectable(\n          playground,\n          elem,\n          {\n            ...this.options,\n            onDragging: () => {\n              // all lines connected to this element should be reRendered\n              this.elementConnectionsMap[elem.id].forEach(i => i.renderLine());\n            },\n          },\n          {\n            onCreatingLine: (targetElem: HTMLElement) => {\n              this.addConnection({\n                start: elem,\n                end: targetElem,\n              });\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  addElement(elem: HTMLElement): void {\n    this.elementConnectionsMap[elem.id] = [];\n    this.playground.appendChild(elem);\n    this.connectableElements.push(\n      new Connectable(\n        this.playground,\n        elem,\n        {\n          ...this.options,\n          onDragging: () => {\n            // all lines connected to this element should be reRendered\n            this.elementConnectionsMap[elem.id].forEach(i => i.renderLine());\n          },\n        },\n        {\n          onCreatingLine: (targetElem: HTMLElement) => {\n            this.addConnection({\n              start: elem,\n              end: targetElem,\n            });\n          },\n        },\n      ),\n    );\n  }\n  addConnection(connection: DomConnection): void {\n    const connectionInstance = new TYPE_MAP[this.options.type](\n      this.playground,\n      connection.start,\n      connection.end,\n      this.options,\n    );\n    this.elementConnectionsMap[connection.start.id].push(connectionInstance);\n    this.elementConnectionsMap[connection.end.id].push(connectionInstance);\n    this.connections.push(connectionInstance);\n  }\n}\n"],"names":["StartPositionEnum","createPolyline","options","onmouseenter","onmouseleave","onmousedown","polyline","document","createElementNS","setAttributeNS","color","strokeWidth","straightPolyline","polyLine","start","end","toString","stateMachinePolyLine","midA","midB","px2num","pxVal","slice","length","num2px","numVal","addClassIfNotExist","elem","cls","classes","Array","isArray","c","classList","contains","add","removeClass","elements","e","remove","setStyle","style","Object","keys","forEach","key","prefixCls","_horizontalHandler","xDistance","yDistance","horizontalLeftTop","horizontalLeftBottom","horizontalRightTop","horizontalRightBottom","_verticalHandler","verticalLeftTop","verticalLeftBottom","verticalRightTop","verticalRightBottom","getStartPosition","pointerPosition","Math","abs","Connector","playground","startElement","endElement","isMoving","event","target","hoverColor","stroke","svgElement","getElementById","getElementsByTagName","fill","isOnArrow","checkIfMouseEventOnArrow","helperPointOffset","x","pageX","offsetLeft","y","pageY","offsetTop","helperPointer","createElement","width","height","position","left","top","appendChild","endPointer","undefined","onmousemove","_event","renderLine","elementMouseIsOver","elementsFromPoint","clientX","clientY","targetElements","filter","i","allElements","getElementsByClassName","from","onmouseup","_upEvent","dispose","removeChild","res","createConnectPoint","startPointer","createSvgArea","drawPath","backgroundColor","pointerSize","startPosition","getBoundingClientRect","innerHTML","zIndex","overflow","getTotalOffset","startOffsetLeft","startOffsetTop","endOffsetLeft","endOffsetTop","setAttribute","svgWidth","baseVal","valueInSpecifiedUnits","svgHeight","svgParameters","leftTop","leftBottom","rightTop","rightBottom","pointer","offsetParent","isNear","a","b","offsetX","offsetY","mapping","arrowX","arrowY","ConnectorBase","isModifyingConnector","startCoordinate","endCoordinate","path","markerEnd","Draggable","dragOptions","isDragging","type","makeItDraggable","elemStartCoordinate","xPos","getComputedStyle","yPos","_diffX","_diffY","onDragging","ConnectorFlowchart","startPoint","endPoint","middleACoordinate","middleBCoordinate","TYPE_MAP","straight","flowchart","Connectable","onCreatingLine","isCreatingNewConnector","nativeElement","createAnchor","anchor","stopPropagation","_newConnection","EasyConnection","connections","connectableElements","elementConnectionsMap","arrowSize","id","con","connectionInstance","push","targetElem","addConnection","connection"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EACA;EACA;EACA;EACA;AAuBA,MAAYA,iBAAZ;;aAAYA;EAAAA,EAAAA,kBAAAA;EAAAA,EAAAA,kBAAAA;EAAAA,EAAAA,kBAAAA;EAAAA,EAAAA,kBAAAA;EAAAA,EAAAA,kBAAAA;EAAAA,EAAAA,kBAAAA;EAAAA,EAAAA,kBAAAA;EAAAA,EAAAA,kBAAAA;KAAAA,sBAAAA;;ECLL,SAASC,cAAT,CACLC,OADK,QAGe;EAAA,MADlBC,YACkB,QADlBA,YACkB;EAAA,MADJC,YACI,QADJA,YACI;EAAA,MADUC,WACV,QADUA,WACV;EACpB,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,eAAT,CAAyB,4BAAzB,EAAuD,UAAvD,CAAjB;EACAF,EAAAA,QAAQ,CAACG,cAAT,CAAwB,IAAxB,EAA8B,MAA9B,EAAsC,MAAtC;EACAH,EAAAA,QAAQ,CAACG,cAAT,CAAwB,IAAxB,EAA8B,QAA9B,YAA2CP,OAAO,CAACQ,KAAnD;EACAJ,EAAAA,QAAQ,CAACG,cAAT,CAAwB,IAAxB,EAA8B,cAA9B,YAAiDP,OAAO,CAACS,WAAzD;EACAL,EAAAA,QAAQ,CAACH,YAAT,GAAwBA,YAAxB;EACAG,EAAAA,QAAQ,CAACF,YAAT,GAAwBA,YAAxB;EACAE,EAAAA,QAAQ,CAACD,WAAT,GAAuBA,WAAvB;EACA,SAAOC,QAAP;EACD;AAED,EAAO,SAASM,gBAAT,CAA0BC,QAA1B,EAAwDC,KAAxD,EAAyEC,GAAzE,EAAwF;EAC7FF,EAAAA,QAAQ,CAACJ,cAAT,CAAwB,IAAxB,EAA8B,QAA9B,YAA2CK,KAAK,CAACE,QAAN,EAA3C,cAA+DD,GAAG,CAACC,QAAJ,EAA/D;EACD;AAED,EAAO,SAASC,oBAAT,CACLJ,QADK,EAELC,KAFK,EAGLI,IAHK,EAILC,IAJK,EAKLJ,GALK,EAML;EACAF,EAAAA,QAAQ,CAACJ,cAAT,CACE,IADF,EAEE,QAFF,YAGKK,KAAK,CAACE,QAAN,EAHL,cAGyBE,IAAI,CAACF,QAAL,EAHzB,cAG4CG,IAAI,CAACH,QAAL,EAH5C,cAG+DD,GAAG,CAACC,QAAJ,EAH/D;EAKD;AAED,EAAO,SAASI,MAAT,CAAgBC,KAAhB,EAAuC;EAC5C,SAAO,CAACA,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAeD,KAAK,CAACE,MAAN,GAAe,CAA9B,CAAR;EACD;AAED,EAAO,SAASC,MAAT,CAAgBC,MAAhB,EAAwC;EAC7C,mBAAUA,MAAV;EACD;EAED;;;;;;AAKA,EAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAA2CC,GAA3C,EAAyE;EAC9E,MAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcH,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAA3C;EAD8E;EAAA;EAAA;;EAAA;EAE9E,yBAAgBC,OAAhB,8HAAyB;EAAA,UAAdG,CAAc;;EACvB,UAAI,CAACL,IAAI,CAACM,SAAL,CAAeC,QAAf,CAAwBF,CAAxB,CAAL,EAAiC;EAC/BL,QAAAA,IAAI,CAACM,SAAL,CAAeE,GAAf,CAAmBH,CAAnB;EACD;EACF;EAN6E;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAO/E;AAED,EAAO,SAASI,WAAT,CAAqBT,IAArB,EAAgDC,GAAhD,EAA8E;EACnF,MAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcH,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAA3C;EACA,MAAMS,QAAQ,GAAGP,KAAK,CAACC,OAAN,CAAcJ,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA9C;EAFmF;EAAA;EAAA;;EAAA;EAGnF,0BAAgBU,QAAhB,mIAA0B;EAAA,UAAfC,CAAe;EAAA;EAAA;EAAA;;EAAA;EACxB,8BAAgBT,OAAhB,mIAAyB;EAAA,cAAdG,CAAc;EACvBM,UAAAA,CAAC,CAACL,SAAF,CAAYM,MAAZ,CAAmBP,CAAnB;EACD;EAHuB;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAIzB;EAPkF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAQpF;AAED,EAgBO,SAASQ,QAAT,CAAkBb,IAAlB,EAAqCc,KAArC,EAA0E;EAC/EC,EAAAA,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA2B,UAAAC,GAAG,EAAI;EAChClB,IAAAA,IAAI,CAACc,KAAL,CAAWI,GAAX,IAAkBJ,KAAK,CAACI,GAAD,CAAvB;EACD,GAFD;EAGD;;EC1GM,IAAMC,SAAS,GAAG,KAAlB;;ECEP,SAASC,kBAAT,CAA4BC,SAA5B,EAA+CC,SAA/C,EAAqF;EACnF,MAAID,SAAS,IAAI,CAAb,IAAkBC,SAAS,IAAI,CAAnC,EAAsC;EACpC,WAAOjD,iBAAiB,CAACkD,iBAAzB;EACD,GAFD,MAEO,IAAIF,SAAS,IAAI,CAAb,IAAkBC,SAAS,GAAG,CAAlC,EAAqC;EAC1C,WAAOjD,iBAAiB,CAACmD,oBAAzB;EACD,GAFM,MAEA,IAAIH,SAAS,GAAG,CAAZ,IAAiBC,SAAS,IAAI,CAAlC,EAAqC;EAC1C,WAAOjD,iBAAiB,CAACoD,kBAAzB;EACD,GAFM,MAEA;EACL,WAAOpD,iBAAiB,CAACqD,qBAAzB;EACD;EACF;;EAED,SAASC,gBAAT,CAA0BN,SAA1B,EAA6CC,SAA7C,EAAmF;EACjF,MAAID,SAAS,IAAI,CAAb,IAAkBC,SAAS,IAAI,CAAnC,EAAsC;EACpC,WAAOjD,iBAAiB,CAACuD,eAAzB;EACD,GAFD,MAEO,IAAIP,SAAS,IAAI,CAAb,IAAkBC,SAAS,GAAG,CAAlC,EAAqC;EAC1C,WAAOjD,iBAAiB,CAACwD,kBAAzB;EACD,GAFM,MAEA,IAAIR,SAAS,GAAG,CAAZ,IAAiBC,SAAS,IAAI,CAAlC,EAAqC;EAC1C,WAAOjD,iBAAiB,CAACyD,gBAAzB;EACD,GAFM,MAEA;EACL,WAAOzD,iBAAiB,CAAC0D,mBAAzB;EACD;EACF;;EAED,SAASC,gBAAT,CACEX,SADF,EAEEC,SAFF,EAGEW,eAHF,EAIqB;EACnB,UAAQA,eAAR;EACE,SAAK,MAAL;EACE,aAAOC,IAAI,CAACC,GAAL,CAASd,SAAT,KAAuBa,IAAI,CAACC,GAAL,CAASb,SAAT,CAAvB,GACHF,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,CADf,GAEHK,gBAAgB,CAACN,SAAD,EAAYC,SAAZ,CAFpB;;EAGF,SAAK,YAAL;EACE,aAAOF,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,CAAzB;;EACF,SAAK,UAAL;EACA;EACE,aAAOK,gBAAgB,CAACN,SAAD,EAAYC,SAAZ,CAAvB;EATJ;EAWD;;ECnCD;;;;AAGA,MAAsBc,SAAtB;EAAA;EAAA;EAGE;EAGA;EAGA;EAGA;EACA;EAIA;EAGA;;EAOA;;;;;;EAMA,qBACEC,UADF,EAEEC,YAFF,EAGEC,UAHF,EAIEhE,OAJF,EAKE;EAAA;;EAAA;;EAAA,SAdFiE,QAcE,GAdS,KAcT;;EAAA,SAmNFhE,YAnNE,GAmNa,UAACiE,KAAD,EAAuB;EACpC,UAAM9D,QAAQ,GAAG8D,KAAK,CAACC,MAAvB;EACA,UAAMC,UAAU,GAAG,KAAI,CAACpE,OAAL,CAAaoE,UAAb,IAA2B,KAAI,CAACpE,OAAL,CAAaQ,KAA3D;EACAJ,MAAAA,QAAQ,CAACmC,KAAT,CAAe8B,MAAf,GAAwBD,UAAxB;EACA,MAAA,KAAI,CAACE,UAAL,CAAgBC,cAAhB,CAA+B,gBAA/B,EAAiDC,oBAAjD,CAAsE,MAAtE,EAA8E,CAA9E,EAAiFjC,KAAjF,CAAuFkC,IAAvF,GAA8FL,UAA9F,CAJoC;EAMrC,KAzNC;;EAAA,SA+NFlE,YA/NE,GA+Na,UAACgE,KAAD,EAAuB;EACnCA,MAAAA,KAAK,CAACC,MAAP,CAA8B5B,KAA9B,CAAoC8B,MAApC,GAA6C,KAAI,CAACrE,OAAL,CAAaQ,KAA1D;EACA,MAAA,KAAI,CAAC8D,UAAL,CAAgBC,cAAhB,CAA+B,gBAA/B,EAAiDC,oBAAjD,CAAsE,MAAtE,EAA8E,CAA9E,EAAiFjC,KAAjF,CAAuFkC,IAAvF,GAA8F,KAAI,CAACzE,OAAL,CAAaQ,KAA3G,CAFoC;EAIrC,KAnOC;;EAAA,SA0OFL,WA1OE,GA0OY,UAAC+D,KAAD,EAAuB;EACnC,UAAMQ,SAAS,GAAG,KAAI,CAACC,wBAAL,CAA8BT,KAA9B,CAAlB;;EACA,UAAIQ,SAAJ,EAAe;EACb;EACA;EACA,QAAA,KAAI,CAACT,QAAL,GAAgB,IAAhB;EACA,YAAMW,iBAAiB,GAAG,CAA1B;EACA,YAAMC,CAAS,GAAGX,KAAK,CAACY,KAAN,GAAc,KAAI,CAAChB,UAAL,CAAgBiB,UAAhD;EACA,YAAMC,CAAS,GAAGd,KAAK,CAACe,KAAN,GAAc,KAAI,CAACnB,UAAL,CAAgBoB,SAAhD;EACA,QAAA,KAAI,CAACC,aAAL,GAAqB9E,QAAQ,CAAC+E,aAAT,CAAuB,KAAvB,CAArB;EACA9C,QAAAA,QAAQ,CAAC,KAAI,CAAC6C,aAAN,EAAqB;EAC3BE,UAAAA,KAAK,EAAE,KADoB;EAE3BC,UAAAA,MAAM,EAAE,KAFmB;EAG3BC,UAAAA,QAAQ,EAAE,UAHiB;EAI3BC,UAAAA,IAAI,YAAKX,CAAC,GAAGD,iBAAT,OAJuB;EAK3Ba,UAAAA,GAAG,YAAKT,CAAC,GAAGJ,iBAAT;EALwB,SAArB,CAAR;;EAOA,QAAA,KAAI,CAACd,UAAL,CAAgB4B,WAAhB,CAA4B,KAAI,CAACP,aAAjC;;EACA,QAAA,KAAI,CAACnB,UAAL,GAAkB,KAAI,CAACmB,aAAvB;EACA,QAAA,KAAI,CAACQ,UAAL,GAAkBC,SAAlB,CAjBa;;EAmBbvF,QAAAA,QAAQ,CAACwF,WAAT,GAAuB,UAACC,MAAD,EAAwB;EAC7C,cAAI,KAAI,CAAC7B,QAAT,EAAmB;EACjB,YAAA,KAAI,CAACkB,aAAL,CAAmB5C,KAAnB,CAAyBiD,IAAzB,aAAmCM,MAAM,CAAChB,KAAP,GAAe,KAAI,CAAChB,UAAL,CAAgBiB,UAA/B,GAA4CH,iBAA/E;EACA,YAAA,KAAI,CAACO,aAAL,CAAmB5C,KAAnB,CAAyBkD,GAAzB,aAAkCK,MAAM,CAACb,KAAP,GAAe,KAAI,CAACnB,UAAL,CAAgBoB,SAA/B,GAA2CN,iBAA7E;;EACA,YAAA,KAAI,CAACmB,UAAL;;EACA,gBAAMC,kBAAkB,GAAG3F,QAAQ,CAAC4F,iBAAT,CAA2BH,MAAM,CAACI,OAAlC,EAA2CJ,MAAM,CAACK,OAAlD,CAA3B;EACA,gBAAMC,cAAc,GAAGJ,kBAAkB,CAACK,MAAnB,CAA0B,UAAAC,CAAC;EAAA,qBAAIA,CAAC,CAACvE,SAAF,CAAYC,QAAZ,CAAqB,aAArB,CAAJ;EAAA,aAA3B,CAAvB;;EAEA,gBAAMuE,WAAW,GAAG,KAAI,CAACzC,UAAL,CAAgB0C,sBAAhB,WAA0C5D,SAA1C,cAApB;;EACA,gBAAIwD,cAAc,CAAC/E,MAAf,GAAwB,CAA5B,EAA+B;EAC7BG,cAAAA,kBAAkB,CAAC4E,cAAc,CAAC,CAAD,CAAf,YAAuBxD,SAAvB,WAAlB,CAD6B;;EAG7BV,cAAAA,WAAW,CAACN,KAAK,CAAC6E,IAAN,CAAWF,WAAX,EAAwBF,MAAxB,CAA+B,UAAAC,CAAC;EAAA,uBAAIA,CAAC,KAAKF,cAAc,CAAC,CAAD,CAAxB;EAAA,eAAhC,CAAD,YAAkExD,SAAlE,WAAX;EACD,aAJD,MAIO;EACLV,cAAAA,WAAW,CAACN,KAAK,CAAC6E,IAAN,CAAWF,WAAX,CAAD,YAA6B3D,SAA7B,WAAX;EACD;EACF;EACF,SAjBD,CAnBa;;;EAuCbvC,QAAAA,QAAQ,CAACqG,SAAT,GAAqB,UAACC,QAAD,EAA0B;EAC7C,UAAA,KAAI,CAAC1C,QAAL,GAAgB,KAAhB;EACA,cAAM+B,kBAAkB,GAAG3F,QAAQ,CAAC4F,iBAAT,CAA2BU,QAAQ,CAACT,OAApC,EAA6CS,QAAQ,CAACR,OAAtD,CAA3B;EACA,cAAMC,cAAc,GAAGJ,kBAAkB,CAACK,MAAnB,CAA0B,UAAAC,CAAC;EAAA,mBAAIA,CAAC,CAACvE,SAAF,CAAYC,QAAZ,CAAqB,aAArB,CAAJ;EAAA,WAA3B,CAAvB;;EACA,cAAIoE,cAAc,CAAC/E,MAAf,GAAwB,CAA5B,EAA+B;EAC7B,YAAA,KAAI,CAAC2C,UAAL,GAAkBoC,cAAc,CAAC,CAAD,CAAhC;EACA,YAAA,KAAI,CAACT,UAAL,GAAkBC,SAAlB;;EACA,YAAA,KAAI,CAACG,UAAL;;EACA7D,YAAAA,WAAW,CAACkE,cAAc,CAAC,CAAD,CAAf,YAAuBxD,SAAvB,WAAX;EACD,WALD,MAKO;EACL,YAAA,KAAI,CAACgE,OAAL;EACD;;EACD,cAAI,KAAI,CAACzB,aAAT,EAAwB;EACtB,YAAA,KAAI,CAACrB,UAAL,CAAgB+C,WAAhB,CAA4B,KAAI,CAAC1B,aAAjC;;EACA,YAAA,KAAI,CAACA,aAAL,GAAqBS,SAArB;EACD;EACF,SAhBD;EAiBD,OA1DkC;;EA4DpC,KAtSC;;EACA,SAAK5F,OAAL,GAAeA,OAAf;EACA,SAAK+D,YAAL,GAAoBA,YAApB;EACA,SAAKC,UAAL,GAAkBA,UAAlB;EACAxC,IAAAA,kBAAkB,CAACuC,YAAD,YAAkBnB,SAAlB,cAAlB;EACApB,IAAAA,kBAAkB,CAACwC,UAAD,YAAgBpB,SAAhB,cAAlB;EACA,SAAKkB,UAAL,GAAkBA,UAAlB,CANA;;EASA,QAAMgD,GAAG,GAAG,KAAKC,kBAAL,CAAwB,KAAKhD,YAA7B,EAA2C,KAAKC,UAAhD,CAAZ;EACA,SAAKgD,YAAL,GAAoBF,GAAG,CAAClG,KAAxB;EACA,SAAK+E,UAAL,GAAkBmB,GAAG,CAACjG,GAAtB;EACAW,IAAAA,kBAAkB,CAAC,KAAKwF,YAAN,YAAuBpE,SAAvB,cAAlB;EACApB,IAAAA,kBAAkB,CAAC,KAAKmE,UAAN,YAAqB/C,SAArB,cAAlB,CAbA;;EAgBA,SAAK0B,UAAL,GAAkB,KAAK2C,aAAL,EAAlB;EACA,SAAKC,QAAL;EACA,SAAKpD,UAAL,CAAgB4B,WAAhB,CAA4B,KAAKpB,UAAjC;EACD;EAED;;;;;;EA3DF;EAAA;EAAA,iCA+DsB;EAClB,UAAMwC,GAAG,GAAG,KAAKC,kBAAL,CAAwB,KAAKhD,YAA7B,EAA2C,KAAKC,UAAhD,CAAZ;EACA,WAAKgD,YAAL,GAAoBF,GAAG,CAAClG,KAAxB;EACA,WAAK+E,UAAL,GAAkBmB,GAAG,CAACjG,GAAtB;EACAW,MAAAA,kBAAkB,CAAC,KAAKwF,YAAN,YAAuBpE,SAAvB,cAAlB;EACApB,MAAAA,kBAAkB,CAAC,KAAKmE,UAAN,YAAqB/C,SAArB,cAAlB;EACA,WAAKkB,UAAL,CAAgB+C,WAAhB,CAA4B,KAAKvC,UAAjC;EACA,WAAKA,UAAL,GAAkB,KAAK2C,aAAL,EAAlB;EACA,WAAKC,QAAL;EACA,WAAKpD,UAAL,CAAgB4B,WAAhB,CAA4B,KAAKpB,UAAjC;EACD;EAED;;;;EA3EF;EAAA;EAAA,8BA8EmB;EACf,UAAI,KAAKP,YAAL,IAAqB,KAAKiD,YAA9B,EAA4C;EAC1C,aAAKjD,YAAL,CAAkB8C,WAAlB,CAA8B,KAAKG,YAAnC;EACD;;EACD,UAAI,KAAKhD,UAAL,IAAmB,KAAK2B,UAA5B,EAAwC;EACtC,aAAK3B,UAAL,CAAgB6C,WAAhB,CAA4B,KAAKlB,UAAjC;EACD;;EACD,WAAK7B,UAAL,CAAgB+C,WAAhB,CAA4B,KAAKvC,UAAjC;EACD;EAtFH;EAAA;EAAA,uCA0F6BP,YA1F7B,EA0FwDC,UA1FxD,EA0FiF;EAC7E,UAAI,CAAC,CAAC,KAAKgD,YAAX,EAAyB;EACvBjD,QAAAA,YAAY,CAAC8C,WAAb,CAAyB,KAAKG,YAA9B;EACD;;EACD,UAAI,CAAC,CAAC,KAAKrB,UAAX,EAAuB;EACrB3B,QAAAA,UAAU,CAAC6C,WAAX,CAAuB,KAAKlB,UAA5B;EACD,OAN4E;EAQ7E;;;EACA,UAAMqB,YAAY,GAAG3G,QAAQ,CAAC+E,aAAT,CAAuB,KAAvB,CAArB;EACA,UAAMO,UAAU,GAAGtF,QAAQ,CAAC+E,aAAT,CAAuB,KAAvB,CAAnB;EAEA4B,MAAAA,YAAY,CAACzE,KAAb,CAAmBgD,QAAnB,GAA8B,UAA9B;EACAI,MAAAA,UAAU,CAACpD,KAAX,CAAiBgD,QAAjB,GAA4B,UAA5B;EACAyB,MAAAA,YAAY,CAACzE,KAAb,CAAmB4E,eAAnB,GAAqC,SAArC;EACAxB,MAAAA,UAAU,CAACpD,KAAX,CAAiB4E,eAAjB,GAAmC,SAAnC;EACAH,MAAAA,YAAY,CAACzE,KAAb,CAAmB8C,KAAnB,aAA8B,KAAKrF,OAAL,CAAaoH,WAA3C;EACAzB,MAAAA,UAAU,CAACpD,KAAX,CAAiB8C,KAAjB,aAA4B,KAAKrF,OAAL,CAAaoH,WAAzC;EACAJ,MAAAA,YAAY,CAACzE,KAAb,CAAmB+C,MAAnB,aAA+B,KAAKtF,OAAL,CAAaoH,WAA5C;EACAzB,MAAAA,UAAU,CAACpD,KAAX,CAAiB+C,MAAjB,aAA6B,KAAKtF,OAAL,CAAaoH,WAA1C;EAEA,UAAMtE,SAAS,GAAGiB,YAAY,CAACgB,UAAb,GAA0Bf,UAAU,CAACe,UAAvD;EACA,UAAMhC,SAAS,GAAGgB,YAAY,CAACmB,SAAb,GAAyBlB,UAAU,CAACkB,SAAtD;EAEA,WAAKmC,aAAL,GAAqB5D,gBAAgB,CAACX,SAAD,EAAYC,SAAZ,EAAuB,KAAK/C,OAAL,CAAa0D,eAApC,CAArC;;EAEA,cAAQ,KAAK2D,aAAb;EACE,aAAKvH,iBAAiB,CAACkD,iBAAvB;EACA,aAAKlD,iBAAiB,CAACmD,oBAAvB;EACE+D,UAAAA,YAAY,CAACzE,KAAb,CAAmBiD,IAAnB,aAA6BzB,YAAY,CAACuD,qBAAb,GAAqCjC,KAAlE;EACA2B,UAAAA,YAAY,CAACzE,KAAb,CAAmBkD,GAAnB,aAA4B1B,YAAY,CAACuD,qBAAb,GAAqChC,MAArC,GAA8C,CAA9C,GAAkD,KAAKtF,OAAL,CAAaoH,WAAb,GAA2B,CAAzG;EACAzB,UAAAA,UAAU,CAACpD,KAAX,CAAiBiD,IAAjB,aAA2B,CAAC,KAAKxF,OAAL,CAAaoH,WAAzC;EACAzB,UAAAA,UAAU,CAACpD,KAAX,CAAiBkD,GAAjB,aAA0BzB,UAAU,CAACsD,qBAAX,GAAmChC,MAAnC,GAA4C,CAA5C,GAAgD,KAAKtF,OAAL,CAAaoH,WAAb,GAA2B,CAArG;EACA;;EACF,aAAKtH,iBAAiB,CAACqD,qBAAvB;EACA,aAAKrD,iBAAiB,CAACoD,kBAAvB;EACE8D,UAAAA,YAAY,CAACzE,KAAb,CAAmBiD,IAAnB,aAA6B,CAAC,KAAKxF,OAAL,CAAaoH,WAA3C;EACAJ,UAAAA,YAAY,CAACzE,KAAb,CAAmBkD,GAAnB,aAA4B1B,YAAY,CAACuD,qBAAb,GAAqChC,MAArC,GAA8C,CAA9C,GAAkD,KAAKtF,OAAL,CAAaoH,WAAb,GAA2B,CAAzG;EACAzB,UAAAA,UAAU,CAACpD,KAAX,CAAiBiD,IAAjB,aAA2BxB,UAAU,CAACsD,qBAAX,GAAmCjC,KAA9D;EACAM,UAAAA,UAAU,CAACpD,KAAX,CAAiBkD,GAAjB,aAA0BzB,UAAU,CAACsD,qBAAX,GAAmChC,MAAnC,GAA4C,CAA5C,GAAgD,KAAKtF,OAAL,CAAaoH,WAAb,GAA2B,CAArG;EACA;;EACF,aAAKtH,iBAAiB,CAACuD,eAAvB;EACA,aAAKvD,iBAAiB,CAACyD,gBAAvB;EACE;EACA;EACAyD,UAAAA,YAAY,CAACzE,KAAb,CAAmBiD,IAAnB,aAA6BzB,YAAY,CAACuD,qBAAb,GAAqCjC,KAArC,GAA6C,CAA7C,GAAiD,KAAKrF,OAAL,CAAaoH,WAAb,GAA2B,CAAzG;EACAJ,UAAAA,YAAY,CAACzE,KAAb,CAAmBkD,GAAnB,aAA4B1B,YAAY,CAACuD,qBAAb,GAAqChC,MAAjE;EACAK,UAAAA,UAAU,CAACpD,KAAX,CAAiBiD,IAAjB,aAA2BxB,UAAU,CAACsD,qBAAX,GAAmCjC,KAAnC,GAA2C,CAA3C,GAA+C,KAAKrF,OAAL,CAAaoH,WAAb,GAA2B,CAArG;EACAzB,UAAAA,UAAU,CAACpD,KAAX,CAAiBkD,GAAjB,aAA0B,CAAC,KAAKzF,OAAL,CAAaoH,WAAxC;EACA;;EACF,aAAKtH,iBAAiB,CAACwD,kBAAvB;EACA,aAAKxD,iBAAiB,CAAC0D,mBAAvB;EACE;EACA;EACAwD,UAAAA,YAAY,CAACzE,KAAb,CAAmBiD,IAAnB,aAA6BzB,YAAY,CAACuD,qBAAb,GAAqCjC,KAArC,GAA6C,CAA7C,GAAiD,KAAKrF,OAAL,CAAaoH,WAAb,GAA2B,CAAzG;EACAJ,UAAAA,YAAY,CAACzE,KAAb,CAAmBkD,GAAnB,cAA6B,KAAKzF,OAAL,CAAaoH,WAA1C;EACAzB,UAAAA,UAAU,CAACpD,KAAX,CAAiBiD,IAAjB,aAA2BxB,UAAU,CAACsD,qBAAX,GAAmCjC,KAAnC,GAA2C,CAA3C,GAA+C,KAAKrF,OAAL,CAAaoH,WAAb,GAA2B,CAArG;EACAzB,UAAAA,UAAU,CAACpD,KAAX,CAAiBkD,GAAjB,aAA0BzB,UAAU,CAACsD,qBAAX,GAAmChC,MAA7D;EACA;EAhCJ;;EAmCAvB,MAAAA,YAAY,CAAC2B,WAAb,CAAyBsB,YAAzB;EACAhD,MAAAA,UAAU,CAAC0B,WAAX,CAAuBC,UAAvB;EACA,aAAO;EACL/E,QAAAA,KAAK,EAAGoG,YADH;EAELnG,QAAAA,GAAG,EAAG8E;EAFD,OAAP;EAID;EAED;;;;;EA/JF;EAAA;EAAA,oCAmK0B;EACtB,UAAMrB,UAAU,GAAGjE,QAAQ,CAACC,eAAT,CAAyB,4BAAzB,EAAuD,KAAvD,CAAnB;EACAgE,MAAAA,UAAU,CAACiD,SAAX,4NAGwB,KAAKvH,OAAL,CAAaQ,KAHrC,uEAFsB;EAStB;;EACA8D,MAAAA,UAAU,CAAC/B,KAAX,CAAiBgD,QAAjB,GAA4B,UAA5B;EACAjB,MAAAA,UAAU,CAAC/B,KAAX,CAAiBiF,MAAjB,GAA0B,KAA1B;EACAlD,MAAAA,UAAU,CAAC/B,KAAX,CAAiBkF,QAAjB,GAA4B,SAA5B;;EAZsB,iCAc6C,KAAKC,cAAL,CAAoB,KAAKV,YAAzB,CAd7C;EAAA,UAcFW,eAdE,wBAcd5C,UAdc;EAAA,UAc0B6C,cAd1B,wBAce1C,SAdf;;EAAA,kCAeyC,KAAKwC,cAAL,CAAoB,KAAK/B,UAAzB,CAfzC;EAAA,UAeFkC,aAfE,yBAed9C,UAfc;EAAA,UAewB+C,YAfxB,yBAea5C,SAfb;;EAiBtB,cAAQ,KAAKmC,aAAb;EACE,aAAKvH,iBAAiB,CAACkD,iBAAvB;EACA,aAAKlD,iBAAiB,CAACuD,eAAvB;EACEiB,UAAAA,UAAU,CAAC/B,KAAX,CAAiBiD,IAAjB,aAA2BmC,eAA3B;EACArD,UAAAA,UAAU,CAAC/B,KAAX,CAAiBkD,GAAjB,aAA0BmC,cAA1B;EACA;;EACF,aAAK9H,iBAAiB,CAACoD,kBAAvB;EACA,aAAKpD,iBAAiB,CAACyD,gBAAvB;EACEe,UAAAA,UAAU,CAAC/B,KAAX,CAAiBiD,IAAjB,aAA2BqC,aAA3B;EACAvD,UAAAA,UAAU,CAAC/B,KAAX,CAAiBkD,GAAjB,aAA0BmC,cAA1B;EACA;;EACF,aAAK9H,iBAAiB,CAACmD,oBAAvB;EACA,aAAKnD,iBAAiB,CAACwD,kBAAvB;EACEgB,UAAAA,UAAU,CAAC/B,KAAX,CAAiBiD,IAAjB,aAA2BmC,eAA3B;EACArD,UAAAA,UAAU,CAAC/B,KAAX,CAAiBkD,GAAjB,aAA0BqC,YAA1B;EACA;;EACF,aAAKhI,iBAAiB,CAACqD,qBAAvB;EACA,aAAKrD,iBAAiB,CAAC0D,mBAAvB;EACEc,UAAAA,UAAU,CAAC/B,KAAX,CAAiBiD,IAAjB,aAA2BqC,aAA3B;EACAvD,UAAAA,UAAU,CAAC/B,KAAX,CAAiBkD,GAAjB,aAA0BqC,YAA1B;EACA;EApBJ;;EAuBA,UAAMzC,KAAK,GAAG1B,IAAI,CAACC,GAAL,CAAS+D,eAAe,GAAGE,aAA3B,IAA4C,KAAK7H,OAAL,CAAaoH,WAAvE;EACA,UAAM9B,MAAM,GAAG3B,IAAI,CAACC,GAAL,CAASgE,cAAc,GAAGE,YAA1B,IAA0C,KAAK9H,OAAL,CAAaoH,WAAtE;EACA9C,MAAAA,UAAU,CAACyD,YAAX,CAAwB,OAAxB,YAAoC1C,KAApC;EACAf,MAAAA,UAAU,CAACyD,YAAX,CAAwB,QAAxB,YAAqCzC,MAArC;EAEA,UAAM0C,QAAgB,GAAG1D,UAAU,CAACe,KAAX,CAAiB4C,OAAjB,CAAyBC,qBAAlD;EACA,UAAMC,SAAiB,GAAG7D,UAAU,CAACgB,MAAX,CAAkB2C,OAAlB,CAA0BC,qBAApD;EAEA,WAAKE,aAAL,GAAqB;EACnB9C,QAAAA,MAAM,EAAE6C,SADW;EAEnB9C,QAAAA,KAAK,EAAE2C,QAFY;EAGnBK,QAAAA,OAAO,EAAE,CAAC,KAAKrI,OAAL,CAAaoH,WAAb,GAA2B,CAA5B,EAA+B,KAAKpH,OAAL,CAAaoH,WAAb,GAA2B,CAA1D,CAHU;EAInBkB,QAAAA,UAAU,EAAE,CAAC,KAAKtI,OAAL,CAAaoH,WAAb,GAA2B,CAA5B,EAA+Be,SAAS,GAAG,KAAKnI,OAAL,CAAaoH,WAAb,GAA2B,CAAtE,CAJO;EAKnBmB,QAAAA,QAAQ,EAAE,CAACP,QAAQ,GAAG,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAAvC,EAA0C,KAAKpH,OAAL,CAAaoH,WAAb,GAA2B,CAArE,CALS;EAMnBoB,QAAAA,WAAW,EAAE,CAACR,QAAQ,GAAG,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAAvC,EAA0Ce,SAAS,GAAG,KAAKnI,OAAL,CAAaoH,WAAb,GAA2B,CAAjF;EANM,OAArB;EAQA,aAAO9C,UAAP;EACD;EA5NH;EAAA;EAAA,mCA8NiBmE,OA9NjB,EA8N0C;EACtC,UAAM1D,UAAU,GAAG0D,OAAO,CAAC1D,UAAR,GAAsB0D,OAAO,CAACC,YAAT,CAAsC3D,UAA9E;EACA,UAAMG,SAAS,GAAGuD,OAAO,CAACvD,SAAR,GAAqBuD,OAAO,CAACC,YAAT,CAAsCxD,SAA5E;EACA,aAAO;EACLH,QAAAA,UAAU,EAAVA,UADK;EAELG,QAAAA,SAAS,EAATA;EAFK,OAAP;EAID;EArOH;EAAA;EAAA,6CAuOmChB,KAvOnC,EAuO+D;EAAA;;EAC3D,UAAMyE,MAAM,GAAG,SAATA,MAAS,CAACC,CAAD,EAAIC,CAAJ;EAAA,eAAUlF,IAAI,CAACC,GAAL,CAASgF,CAAC,GAAGC,CAAb,IAAkB,EAA5B;EAAA,OAAf;;EAD2D,UAEnDC,OAFmD,GAE9B5E,KAF8B,CAEnD4E,OAFmD;EAAA,UAE1CC,OAF0C,GAE9B7E,KAF8B,CAE1C6E,OAF0C;EAG3D,UAAMC,OAAO,6CACVlJ,iBAAiB,CAACkD,iBADR,EAC4B,aAD5B,6BAEVlD,iBAAiB,CAACuD,eAFR,EAE0B,aAF1B,YAAb;;EAH2D,iDAOlC,KAAK+E,aAAL,CAAmBY,OAAO,CAAC,KAAK3B,aAAN,CAA1B,CAPkC;EAAA,UAOpD4B,MAPoD;EAAA,UAO5CC,MAP4C;;EAQ3D,aAAOP,MAAM,CAACG,OAAD,EAAUG,MAAV,CAAN,IAA2BN,MAAM,CAACI,OAAD,EAAUG,MAAV,CAAxC;EACD,KAhPH;EAmPE;;EAEA;;;;;EArPF;;EAAA;EAAA;;MCJaC,aAAb;EAAA;EAAA;EAAA;;EAGE;EAGA,yBAAYrF,UAAZ,EAAqCC,YAArC,EAAgEC,UAAhE,EAAyFhE,OAAzF,EAAoH;EAAA;;EAAA;;EAClH,uFAAM8D,UAAN,EAAkBC,YAAlB,EAAgCC,UAAhC,EAA4ChE,OAA5C;EADkH,UAFpHoJ,oBAEoH,GAF7F,KAE6F;EAAA;EAEnH;;EARH;EAAA;EAAA,+BAUa;EACT,UAAIC,eAAJ;EACA,UAAIC,aAAJ;;EACA,cAAQ,KAAKjC,aAAb;EACE,aAAKvH,iBAAiB,CAACuD,eAAvB;EACA,aAAKvD,iBAAiB,CAACkD,iBAAvB;EACE;EACAqG,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBC,OAArC;EACAiB,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBI,WAAnC;EACA;;EACF,aAAK1I,iBAAiB,CAACwD,kBAAvB;EACA,aAAKxD,iBAAiB,CAACmD,oBAAvB;EACEoG,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBE,UAArC;EACAgB,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBG,QAAnC;EACA;;EACF,aAAKzI,iBAAiB,CAACyD,gBAAvB;EACA,aAAKzD,iBAAiB,CAACoD,kBAAvB;EACEmG,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBG,QAArC;EACAe,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBE,UAAnC;EACA;;EACF,aAAKxI,iBAAiB,CAAC0D,mBAAvB;EACA,aAAK1D,iBAAiB,CAACqD,qBAAvB;EACEkG,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBI,WAArC;EACAc,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBC,OAAnC;EACA;EArBJ;;EAuBA,UAAMkB,IAAI,GAAGxJ,cAAc,CAAC,KAAKC,OAAN,EAAe;EACxCC,QAAAA,YAAY,EAAE,KAAKA,YADqB;EAExCC,QAAAA,YAAY,EAAE,KAAKA,YAFqB;EAGxCC,QAAAA,WAAW,EAAE,KAAKA;EAHsB,OAAf,CAA3B;EAKAO,MAAAA,gBAAgB,CAAC6I,IAAD,EAAOF,eAAP,EAAwBC,aAAxB,CAAhB;EACAC,MAAAA,IAAI,CAAChH,KAAL,CAAWiH,SAAX,GAAuB,sBAAvB;EACA,WAAKlF,UAAL,CAAgBoB,WAAhB,CAA4B6D,IAA5B;EACD;EA5CH;;EAAA;EAAA,EAAmC1F,SAAnC;;MCGa4F,SAAb;EAAA;EAAA;EAQE,qBAAYhI,IAAZ,EAA+BiI,WAA/B,EAAyD;EAAA;;EAAA,SANzDC,UAMyD,GAN5C,KAM4C;EACvD,SAAKlI,IAAL,GAAYA,IAAZ;EACA,SAAKiI,WAAL,GAAmBA,WAAW,IAAI;EAAEE,MAAAA,IAAI,EAAE;EAAR,KAAlC;EACA,SAAKC,eAAL;EACA,SAAKC,mBAAL,GAA2B;EACzBC,MAAAA,IAAI,EAAE7I,MAAM,CAAC8I,gBAAgB,CAAC,KAAKvI,IAAN,CAAhB,CAA4B+D,IAA7B,CADa;EAEzByE,MAAAA,IAAI,EAAE/I,MAAM,CAAC8I,gBAAgB,CAAC,KAAKvI,IAAN,CAAhB,CAA4BgE,GAA7B;EAFa,KAA3B;EAID;;EAhBH;EAAA;EAAA,sCAkB4B;EAAA;;EACxB,WAAKhE,IAAL,CAAUc,KAAV,CAAgBgD,QAAhB,GAA2B,UAA3B;;EACA,WAAK9D,IAAL,CAAUtB,WAAV,GAAwB,UAAC+D,KAAD,EAAuB;EAC7C,QAAA,KAAI,CAACmF,eAAL,GAAuB;EACrBU,UAAAA,IAAI,EAAE7F,KAAK,CAACgC,OADS;EAErB+D,UAAAA,IAAI,EAAE/F,KAAK,CAACiC;EAFS,SAAvB;EAIA,QAAA,KAAI,CAACwD,UAAL,GAAkB,IAAlB;;EAEAtJ,QAAAA,QAAQ,CAACwF,WAAT,GAAuB,UAACC,MAAD,EAAwB;EAC7C,cAAI,KAAI,CAAC6D,UAAT,EAAqB;EACnB,gBAAMO,MAAM,GAAGpE,MAAM,CAACI,OAAP,GAAiB,KAAI,CAACmD,eAAL,CAAqBU,IAArD;;EACA,gBAAMI,MAAM,GAAGrE,MAAM,CAACK,OAAP,GAAiB,KAAI,CAACkD,eAAL,CAAqBY,IAArD;;EACA,YAAA,KAAI,CAACxI,IAAL,CAAUc,KAAV,CAAgBiD,IAAhB,GAAuBlE,MAAM,CAAC,KAAI,CAACwI,mBAAL,CAAyBC,IAAzB,GAAgCG,MAAjC,CAA7B;EACA,YAAA,KAAI,CAACzI,IAAL,CAAUc,KAAV,CAAgBkD,GAAhB,GAAsBnE,MAAM,CAAC,KAAI,CAACwI,mBAAL,CAAyBG,IAAzB,GAAgCE,MAAjC,CAA5B;;EACA,gBAAI,OAAO,KAAI,CAACT,WAAL,CAAiBU,UAAxB,KAAuC,UAA3C,EAAuD;EACrD,cAAA,KAAI,CAACV,WAAL,CAAiBU,UAAjB;EACD;EACF;EACF,SAVD;;EAYA/J,QAAAA,QAAQ,CAACqG,SAAT,GAAqB,YAAM;EACzB,UAAA,KAAI,CAACiD,UAAL,GAAkB,KAAlB;EACA,UAAA,KAAI,CAACN,eAAL,GAAuBzD,SAAvB,CAFyB;;EAIzB,UAAA,KAAI,CAACkE,mBAAL,GAA2B;EACzBC,YAAAA,IAAI,EAAE7I,MAAM,CAAC8I,gBAAgB,CAAC,KAAI,CAACvI,IAAN,CAAhB,CAA4B+D,IAA7B,CADa;EAEzByE,YAAAA,IAAI,EAAE/I,MAAM,CAAC8I,gBAAgB,CAAC,KAAI,CAACvI,IAAN,CAAhB,CAA4BgE,GAA7B;EAFa,WAA3B;;EAKApF,UAAAA,QAAQ,CAACwF,WAAT,GAAuB,YAAM,EAA7B;EACD,SAVD;EAWD,OA9BD;EA+BD;EAnDH;;EAAA;EAAA;;MCLawE,kBAAb;EAAA;EAAA;EAAA;;EACE,8BAAYvG,UAAZ,EAAqCwG,UAArC,EAA8DC,QAA9D,EAAqFvK,OAArF,EAAgH;EAAA;;EAAA,2FACxG8D,UADwG,EAC5FwG,UAD4F,EAChFC,QADgF,EACtEvK,OADsE;EAE/G;;EAHH;EAAA;EAAA,+BAKa;EACT,UAAMgI,QAAgB,GAAG,KAAK1D,UAAL,CAAgBe,KAAhB,CAAsB4C,OAAtB,CAA8BC,qBAAvD;EACA,UAAMC,SAAiB,GAAG,KAAK7D,UAAL,CAAgBgB,MAAhB,CAAuB2C,OAAvB,CAA+BC,qBAAzD;EACA,UAAImB,eAAJ;EACA,UAAImB,iBAAJ;EACA,UAAIC,iBAAJ;EACA,UAAInB,aAAJ;;EACA,cAAQ,KAAKjC,aAAb;EACE,aAAKvH,iBAAiB,CAACuD,eAAvB;EACEgG,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBC,OAArC;EACAmC,UAAAA,iBAAiB,GAAG,CAAC,KAAKxK,OAAL,CAAaoH,WAAb,GAA2B,CAA5B,EAA+Be,SAAS,GAAG,CAA3C,CAApB;EACAsC,UAAAA,iBAAiB,GAAG,CAACzC,QAAQ,GAAG,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAAvC,EAA0Ce,SAAS,GAAG,CAAtD,CAApB;EACAmB,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBI,WAAnC;EACA;;EACF,aAAK1I,iBAAiB,CAACkD,iBAAvB;EACEqG,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBC,OAArC;EACAmC,UAAAA,iBAAiB,GAAG,CAACxC,QAAQ,GAAG,CAAZ,EAAe,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAA1C,CAApB;EACAqD,UAAAA,iBAAiB,GAAG,CAACzC,QAAQ,GAAG,CAAZ,EAAeG,SAAS,GAAG,KAAKnI,OAAL,CAAaoH,WAAb,GAA2B,CAAtD,CAApB;EACAkC,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBI,WAAnC;EACA;;EACF,aAAK1I,iBAAiB,CAACyD,gBAAvB;EACE8F,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBG,QAArC;EACAiC,UAAAA,iBAAiB,GAAG,CAACxC,QAAQ,GAAG,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAAvC,EAA0Ce,SAAS,GAAG,CAAtD,CAApB;EACAsC,UAAAA,iBAAiB,GAAG,CAAC,KAAKzK,OAAL,CAAaoH,WAAb,GAA2B,CAA5B,EAA+Be,SAAS,GAAG,CAA3C,CAApB;EACAmB,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBE,UAAnC;EACA;;EACF,aAAKxI,iBAAiB,CAACoD,kBAAvB;EACEmG,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBG,QAArC;EACAiC,UAAAA,iBAAiB,GAAG,CAACxC,QAAQ,GAAG,CAAZ,EAAe,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAA1C,CAApB;EACAqD,UAAAA,iBAAiB,GAAG,CAACzC,QAAQ,GAAG,CAAZ,EAAeG,SAAS,GAAG,KAAKnI,OAAL,CAAaoH,WAAb,GAA2B,CAAtD,CAApB;EACAkC,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBE,UAAnC;EACA;;EACF,aAAKxI,iBAAiB,CAACwD,kBAAvB;EACE+F,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBE,UAArC;EACAkC,UAAAA,iBAAiB,GAAG,CAAC,KAAKxK,OAAL,CAAaoH,WAAb,GAA2B,CAA5B,EAA+Be,SAAS,GAAG,CAA3C,CAApB;EACAsC,UAAAA,iBAAiB,GAAG,CAACzC,QAAQ,GAAG,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAAvC,EAA0Ce,SAAS,GAAG,CAAtD,CAApB;EACAmB,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBG,QAAnC;EACA;;EACF,aAAKzI,iBAAiB,CAACmD,oBAAvB;EACEoG,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBE,UAArC;EACAkC,UAAAA,iBAAiB,GAAG,CAACxC,QAAQ,GAAG,CAAZ,EAAeG,SAAS,GAAG,KAAKnI,OAAL,CAAaoH,WAAb,GAA2B,CAAtD,CAApB;EACAqD,UAAAA,iBAAiB,GAAG,CAACzC,QAAQ,GAAG,CAAZ,EAAe,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAA1C,CAApB;EACAkC,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBG,QAAnC;EACA;;EACF,aAAKzI,iBAAiB,CAAC0D,mBAAvB;EACE6F,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBI,WAArC;EACAgC,UAAAA,iBAAiB,GAAG,CAACxC,QAAQ,GAAG,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAAvC,EAA0Ce,SAAS,GAAG,CAAtD,CAApB;EACAsC,UAAAA,iBAAiB,GAAG,CAAC,KAAKzK,OAAL,CAAaoH,WAAb,GAA2B,CAA5B,EAA+Be,SAAS,GAAG,CAA3C,CAApB;EACAmB,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBC,OAAnC;EACA;;EACF,aAAKvI,iBAAiB,CAACqD,qBAAvB;EACEkG,UAAAA,eAAe,GAAG,KAAKjB,aAAL,CAAmBI,WAArC;EACAgC,UAAAA,iBAAiB,GAAG,CAACxC,QAAQ,GAAG,CAAZ,EAAeG,SAAS,GAAG,KAAKnI,OAAL,CAAaoH,WAAb,GAA2B,CAAtD,CAApB;EACAqD,UAAAA,iBAAiB,GAAG,CAACzC,QAAQ,GAAG,CAAZ,EAAe,KAAKhI,OAAL,CAAaoH,WAAb,GAA2B,CAA1C,CAApB;EACAkC,UAAAA,aAAa,GAAG,KAAKlB,aAAL,CAAmBC,OAAnC;EA/CJ;;EAkDA,UAAMkB,IAAI,GAAGxJ,cAAc,CAAC,KAAKC,OAAN,EAAe;EACxCC,QAAAA,YAAY,EAAE,KAAKA,YADqB;EAExCC,QAAAA,YAAY,EAAE,KAAKA,YAFqB;EAGxCC,QAAAA,WAAW,EAAE,KAAKA;EAHsB,OAAf,CAA3B;EAKAY,MAAAA,oBAAoB,CAACwI,IAAD,EAAOF,eAAP,EAAwBmB,iBAAxB,EAA2CC,iBAA3C,EAA8DnB,aAA9D,CAApB;EACAC,MAAAA,IAAI,CAAChH,KAAL,CAAWiH,SAAX,GAAuB,sBAAvB;EACA,WAAKlF,UAAL,CAAgBoB,WAAhB,CAA4B6D,IAA5B;EACD;EAtEH;;EAAA;EAAA,EAAwC1F,SAAxC;;ECGA,IAAM6G,QAAQ,GAAG;EACf9E,EAAAA,SAAS,EAAEuD,aADI;EAEfwB,EAAAA,QAAQ,EAAExB,aAFK;EAGfyB,EAAAA,SAAS,EAAEP;EAHI,CAAjB;AAMA,MAAaQ,WAAb;EAAA;EAAA;EAAA;;EAME,uBAAY/G,UAAZ,EAAqCrC,IAArC,EAAwDiI,WAAxD,QAAsG;EAAA;;EAAA,QAAlBoB,cAAkB,QAAlBA,cAAkB;;EAAA;;EACpG,qFAAMrJ,IAAN,EAAYiI,WAAZ;EADoG,UAFtGqB,sBAEsG,GAF7E,KAE6E;EAEpG,UAAKC,aAAL,GAAqBvJ,IAArB;EACAa,IAAAA,QAAQ,CAACb,IAAD,EAAO;EACb+F,MAAAA,MAAM,EAAE;EADK,KAAP,CAAR;EAGA,UAAK1D,UAAL,GAAkBA,UAAlB;EACA,UAAKgH,cAAL,GAAsBA,cAAtB;EACAtJ,IAAAA,kBAAkB,CAACC,IAAD,YAAUmB,SAAV,cAAlB;;EACA,UAAKqI,YAAL;;EAToG;EAUrG;;EAhBH;EAAA;EAAA,mCAkByB;EAAA;;EACrB,UAAMC,MAAmB,GAAG7K,QAAQ,CAAC+E,aAAT,CAAuB,KAAvB,CAA5B;EACA8F,MAAAA,MAAM,CAACnJ,SAAP,CAAiBE,GAAjB,WAAwBW,SAAxB;EACAN,MAAAA,QAAQ,CAAC4I,MAAD,EAAS;EACf7F,QAAAA,KAAK,EAAE,MADQ;EAEfC,QAAAA,MAAM,EAAE,MAFO;EAGf6B,QAAAA,eAAe,EAAE,KAHF;EAIf5B,QAAAA,QAAQ,EAAE,UAJK;EAKfC,QAAAA,IAAI,EAAE,MALS;EAMfC,QAAAA,GAAG,EAAE;EANU,OAAT,CAAR,CAHqB;EAarB;;EACAyF,MAAAA,MAAM,CAAC/K,WAAP,GAAqB,UAAC+D,KAAD,EAAuB;EAC1CA,QAAAA,KAAK,CAACiH,eAAN;EACA,QAAA,MAAI,CAACJ,sBAAL,GAA8B,IAA9B,CAF0C;EAM1C;;EACA,YAAMnG,iBAAiB,GAAG,CAA1B;EAEA,YAAMC,CAAS,GAAGX,KAAK,CAACY,KAAN,GAAc,MAAI,CAAChB,UAAL,CAAgBiB,UAAhD;EACA,YAAMC,CAAS,GAAGd,KAAK,CAACe,KAAN,GAAc,MAAI,CAACnB,UAAL,CAAgBoB,SAAhD;EACA,QAAA,MAAI,CAACC,aAAL,GAAqB9E,QAAQ,CAAC+E,aAAT,CAAuB,KAAvB,CAArB;EACA9C,QAAAA,QAAQ,CAAC,MAAI,CAAC6C,aAAN,EAAqB;EAC3BE,UAAAA,KAAK,EAAE,KADoB;EAE3BC,UAAAA,MAAM,EAAE,KAFmB;EAG3BC,UAAAA,QAAQ,EAAE,UAHiB;EAI3BC,UAAAA,IAAI,YAAKX,CAAC,GAAGD,iBAAT,OAJuB;EAK3Ba,UAAAA,GAAG,YAAKT,CAAC,GAAGJ,iBAAT;EALwB,SAArB,CAAR;;EAOA,QAAA,MAAI,CAACd,UAAL,CAAgB4B,WAAhB,CAA4B,MAAI,CAACP,aAAjC;;EACA,YAAIiG,cAAc,GAAG,IAAIV,QAAQ,CAAC,MAAI,CAAChB,WAAL,CAAiBE,IAAlB,CAAZ,CACnB,MAAI,CAAC9F,UADc,EAEnB,MAAI,CAACrC,IAFc,EAGnB,MAAI,CAAC0D,aAHc,EAInB,MAAI,CAACuE,WAJc,CAArB,CApB0C;;;EA4B1CrJ,QAAAA,QAAQ,CAACwF,WAAT,GAAuB,UAACC,MAAD,EAAwB;EAC7C,cAAI,MAAI,CAACiF,sBAAT,EAAiC;EAC/B,YAAA,MAAI,CAAC5F,aAAL,CAAmB5C,KAAnB,CAAyBiD,IAAzB,aAAmCM,MAAM,CAAChB,KAAP,GAAe,MAAI,CAAChB,UAAL,CAAgBiB,UAA/B,GAA4CH,iBAA/E;EACA,YAAA,MAAI,CAACO,aAAL,CAAmB5C,KAAnB,CAAyBkD,GAAzB,aAAkCK,MAAM,CAACb,KAAP,GAAe,MAAI,CAACnB,UAAL,CAAgBoB,SAA/B,GAA2CN,iBAA7E;;EACA,gBAAIwG,cAAJ,EAAoB;EAClBA,cAAAA,cAAc,CAACrF,UAAf;EACD;;EACD,gBAAMC,kBAAkB,GAAG3F,QAAQ,CAAC4F,iBAAT,CAA2BH,MAAM,CAACI,OAAlC,EAA2CJ,MAAM,CAACK,OAAlD,CAA3B;EACA,gBAAMC,cAAc,GAAGJ,kBAAkB,CAACK,MAAnB,CAA0B,UAAAC,CAAC;EAAA,qBAAIA,CAAC,CAACvE,SAAF,CAAYC,QAAZ,CAAqB,aAArB,CAAJ;EAAA,aAA3B,CAAvB;;EAEA,gBAAMuE,WAAW,GAAG,MAAI,CAACzC,UAAL,CAAgB0C,sBAAhB,WAA0C5D,SAA1C,cAApB;;EACA,gBAAIwD,cAAc,CAAC/E,MAAf,GAAwB,CAA5B,EAA+B;EAC7BG,cAAAA,kBAAkB,CAAC4E,cAAc,CAAC,CAAD,CAAf,YAAuBxD,SAAvB,WAAlB,CAD6B;;EAG7BV,cAAAA,WAAW,CAACN,KAAK,CAAC6E,IAAN,CAAWF,WAAX,EAAwBF,MAAxB,CAA+B,UAAAC,CAAC;EAAA,uBAAIA,CAAC,KAAKF,cAAc,CAAC,CAAD,CAAxB;EAAA,eAAhC,CAAD,YAAkExD,SAAlE,WAAX;EACD,aAJD,MAIO;EACLV,cAAAA,WAAW,CAACN,KAAK,CAAC6E,IAAN,CAAWF,WAAX,CAAD,YAA6B3D,SAA7B,WAAX;EACD;EACF;EACF,SAnBD;;EAoBAvC,QAAAA,QAAQ,CAACqG,SAAT,GAAqB,UAACC,QAAD,EAA0B;EAC7C,UAAA,MAAI,CAACoE,sBAAL,GAA8B,KAA9B;EACA,cAAM/E,kBAAkB,GAAG3F,QAAQ,CAAC4F,iBAAT,CAA2BU,QAAQ,CAACT,OAApC,EAA6CS,QAAQ,CAACR,OAAtD,CAA3B;EACA,cAAMC,cAAc,GAAGJ,kBAAkB,CAACK,MAAnB,CAA0B,UAAAC,CAAC;EAAA,mBAAIA,CAAC,CAACvE,SAAF,CAAYC,QAAZ,CAAqB,aAArB,CAAJ;EAAA,WAA3B,CAAvB;;EACA,cAAIoJ,cAAJ,EAAoB;EAClBA,YAAAA,cAAc,CAACxE,OAAf;;EACAwE,YAAAA,cAAc,GAAG,IAAjB;EACD;;EACD,cAAIhF,cAAc,CAAC/E,MAAf,GAAwB,CAA5B,EAA+B;EAC7B,YAAA,MAAI,CAACyJ,cAAL,CAAoB1E,cAAc,CAAC,CAAD,CAAlC;;EACAlE,YAAAA,WAAW,CAACkE,cAAc,CAAC,CAAD,CAAf,YAAuBxD,SAAvB,WAAX;EACD;;EACD,cAAI,MAAI,CAACuC,aAAT,EAAwB;EACtB,YAAA,MAAI,CAACrB,UAAL,CAAgB+C,WAAhB,CAA4B,MAAI,CAAC1B,aAAjC;;EACA,YAAA,MAAI,CAACA,aAAL,GAAqBS,SAArB;EACD;EACF,SAhBD;EAiBD,OAjED;;EAmEA,WAAKnE,IAAL,CAAUiE,WAAV,CAAsBwF,MAAtB;EACD;EApGH;;EAAA;EAAA,EAAiCzB,SAAjC;;ECHA,IAAMiB,UAAQ,GAAG;EACf9E,EAAAA,SAAS,EAAEuD,aADI;EAEfwB,EAAAA,QAAQ,EAAExB,aAFK;EAGfyB,EAAAA,SAAS,EAAEP;EAHI,CAAjB;AAMA,MAAagB,cAAb;EAAA;EAAA;EAQE,0BACEvH,UADF,EAKE;EAAA;;EAAA,QAHA3B,QAGA,uEAH0B,EAG1B;EAAA,QAFAmJ,WAEA,uEAF+B,EAE/B;EAAA,QADAtL,OACA,uEADiC;EAAE4J,MAAAA,IAAI,EAAE;EAAR,KACjC;;EAAA;;EAAA,SAVF2B,mBAUE,GAVmC,EAUnC;EAAA,SATFD,WASE,GAT6B,EAS7B;EAAA,SAPFE,qBAOE,GAP6C,EAO7C;EACA,SAAK1H,UAAL,GAAkBA,UAAlB;EACA,SAAK9D,OAAL;EACEQ,MAAAA,KAAK,EAAE,SADT;EAEE4D,MAAAA,UAAU,EAAE,KAFd;EAGEV,MAAAA,eAAe,EAAE,MAHnB;EAIE0D,MAAAA,WAAW,EAAE,CAJf;EAKE3G,MAAAA,WAAW,EAAE,CALf;EAMEgL,MAAAA,SAAS,EAAE;EANb,OAOKzL,OAPL,EAFA;EAYA;;EAZA;EAAA;EAAA;;EAAA;EAaA,2BAAmBmC,QAAnB,8HAA6B;EAAA,YAAlBV,IAAkB;EAC3B,aAAK+J,qBAAL,CAA2B/J,IAAI,CAACiK,EAAhC,IAAsC,EAAtC;EACD;EAfD;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;;EAAA;EAAA;EAAA;;EAAA;EAgBA,4BAAkBJ,WAAlB,mIAA+B;EAAA,YAApBK,GAAoB;EAC7B,YAAMC,kBAAkB,GAAG,IAAIlB,UAAQ,CAAC1K,OAAO,CAAC4J,IAAT,CAAZ,CAA2B9F,UAA3B,EAAuC6H,GAAG,CAAC/K,KAA3C,EAAkD+K,GAAG,CAAC9K,GAAtD,EAA2D,KAAKb,OAAhE,CAA3B;EACA,aAAKwL,qBAAL,CAA2BG,GAAG,CAAC/K,KAAJ,CAAU8K,EAArC,EAAyCG,IAAzC,CAA8CD,kBAA9C;EACA,aAAKJ,qBAAL,CAA2BG,GAAG,CAAC9K,GAAJ,CAAQ6K,EAAnC,EAAuCG,IAAvC,CAA4CD,kBAA5C;EACA,aAAKN,WAAL,CAAiBO,IAAjB,CAAsBD,kBAAtB;EACD;EArBD;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;;EAAA;EAAA;EAAA;;EAAA;EAAA;EAAA,YAsBWnK,IAtBX;;EAuBE,QAAA,KAAI,CAAC8J,mBAAL,CAAyBM,IAAzB,CACE,IAAIhB,WAAJ,CACE/G,UADF,EAEErC,IAFF,qBAIO,KAAI,CAACzB,OAJZ;EAKIoK,UAAAA,UAAU,EAAE,sBAAM;EAChB;EACA,YAAA,KAAI,CAACoB,qBAAL,CAA2B/J,IAAI,CAACiK,EAAhC,EAAoChJ,OAApC,CAA4C,UAAA4D,CAAC;EAAA,qBAAIA,CAAC,CAACP,UAAF,EAAJ;EAAA,aAA7C;EACD;EARL,YAUE;EACE+E,UAAAA,cAAc,EAAE,wBAACgB,UAAD,EAA6B;EAC3C,YAAA,KAAI,CAACC,aAAL,CAAmB;EACjBnL,cAAAA,KAAK,EAAEa,IADU;EAEjBZ,cAAAA,GAAG,EAAEiL;EAFY,aAAnB;EAID;EANH,SAVF,CADF;EAvBF;;EAsBA,4BAAmB3J,QAAnB,mIAA6B;EAAA;EAsB5B;EA5CD;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EA6CD;;EA1DH;EAAA;EAAA,+BA4DaV,IA5Db,EA4DsC;EAAA;;EAClC,WAAK+J,qBAAL,CAA2B/J,IAAI,CAACiK,EAAhC,IAAsC,EAAtC;EACA,WAAK5H,UAAL,CAAgB4B,WAAhB,CAA4BjE,IAA5B;EACA,WAAK8J,mBAAL,CAAyBM,IAAzB,CACE,IAAIhB,WAAJ,CACE,KAAK/G,UADP,EAEErC,IAFF,qBAIO,KAAKzB,OAJZ;EAKIoK,QAAAA,UAAU,EAAE,sBAAM;EAChB;EACA,UAAA,MAAI,CAACoB,qBAAL,CAA2B/J,IAAI,CAACiK,EAAhC,EAAoChJ,OAApC,CAA4C,UAAA4D,CAAC;EAAA,mBAAIA,CAAC,CAACP,UAAF,EAAJ;EAAA,WAA7C;EACD;EARL,UAUE;EACE+E,QAAAA,cAAc,EAAE,wBAACgB,UAAD,EAA6B;EAC3C,UAAA,MAAI,CAACC,aAAL,CAAmB;EACjBnL,YAAAA,KAAK,EAAEa,IADU;EAEjBZ,YAAAA,GAAG,EAAEiL;EAFY,WAAnB;EAID;EANH,OAVF,CADF;EAqBD;EApFH;EAAA;EAAA,kCAqFgBE,UArFhB,EAqFiD;EAC7C,UAAMJ,kBAAkB,GAAG,IAAIlB,UAAQ,CAAC,KAAK1K,OAAL,CAAa4J,IAAd,CAAZ,CACzB,KAAK9F,UADoB,EAEzBkI,UAAU,CAACpL,KAFc,EAGzBoL,UAAU,CAACnL,GAHc,EAIzB,KAAKb,OAJoB,CAA3B;EAMA,WAAKwL,qBAAL,CAA2BQ,UAAU,CAACpL,KAAX,CAAiB8K,EAA5C,EAAgDG,IAAhD,CAAqDD,kBAArD;EACA,WAAKJ,qBAAL,CAA2BQ,UAAU,CAACnL,GAAX,CAAe6K,EAA1C,EAA8CG,IAA9C,CAAmDD,kBAAnD;EACA,WAAKN,WAAL,CAAiBO,IAAjB,CAAsBD,kBAAtB;EACD;EA/FH;;EAAA;EAAA;;;;;;;;;;;;;;;;"}