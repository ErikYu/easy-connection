{"version":3,"file":"index.js","sources":["../../src/connector.model.ts","../../src/constraints.ts","../../src/utils.ts","../../src/connector-base.ts","../../src/draggable.ts","../../src/connector-flowchart.ts","../../src/connectable.ts","../../src/connection.ts"],"sourcesContent":["export type ConnectorPointPosition = 'top' | 'left' | 'right' | 'bottom';\nexport type ConnectionType = 'stateMachine' | 'straight';\n\ntype PromiseOr<T> = Promise<T> | T;\n\nexport interface ConnectorOptions {\n  pointerSize?: number;\n  strokeWidth?: number;\n  color?: string;\n  arrowSize?: number;\n}\n\nexport interface EasyConnectionOptions extends ConnectorOptions {\n  type: ConnectionType;\n}\n\nexport enum StartPositionEnum {\n  horizontalLeftTop,\n  horizontalLeftBottom,\n  horizontalRightTop,\n  horizontalRightBottom,\n  verticalLeftTop,\n  verticalLeftBottom,\n  verticalRightTop,\n  verticalRightBottom,\n}\n\nexport interface SvgCanvasParameters {\n  height: number;\n  width: number;\n  leftTop: number[];\n  leftBottom: number[];\n  rightTop: number[];\n  rightBottom: number[];\n}\n\nexport interface DrawPath {\n  drawPath: () => void;\n}\n\nexport interface DrawEndArrow {\n  drawEndArrow: () => void;\n}\n\nexport interface DragOptions extends ConnectorOptions {\n  type: ConnectionType;\n  // TODO\n  onBeforeDrag?: () => PromiseOr<boolean>;\n\n  onDragging?: () => void;\n}\n\nexport interface DomConnection {\n  start: HTMLElement;\n  end: HTMLElement;\n}\n","export const prefixCls = 'cnt';\n","import { ConnectorOptions } from './connector.model';\n\ninterface IndexedObject {\n  [a: string]: string;\n}\ntype svgElement = 'path' | 'polyline';\n\nexport function createSvgElement(label: svgElement, styleMap: IndexedObject) {\n  const elem = document.createElementNS('http://www.w3.org/2000/svg', label);\n  Object.keys(styleMap).forEach(key => {\n    elem.setAttributeNS(null, key, styleMap[key]);\n  });\n  return elem;\n}\n\nexport function createPolyline(options: ConnectorOptions): SVGPolylineElement {\n  const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');\n  polyline.setAttributeNS(null, 'fill', 'transparent');\n  polyline.setAttributeNS(null, 'stroke', `${options.color}`);\n  polyline.setAttributeNS(null, 'stroke-width', `${options.strokeWidth}`);\n  return polyline;\n}\n\nexport function straightPolyline(polyLine: SVGPolylineElement, start: number[], end: number[]) {\n  polyLine.setAttributeNS(null, 'points', `${start.toString()} ${end.toString()}`);\n}\n\nexport function stateMachinePolyLine(\n  polyLine: SVGPolylineElement,\n  start: number[],\n  midA: number[],\n  midB: number[],\n  end: number[],\n) {\n  polyLine.setAttributeNS(\n    null,\n    'points',\n    `${start.toString()} ${midA.toString()} ${midB.toString()} ${end.toString()}`,\n  );\n}\n\nexport function px2num(pxVal: string): number {\n  return +pxVal.slice(0, pxVal.length - 2);\n}\n\nexport function num2px(numVal: number): string {\n  return `${numVal}px`;\n}\n\n/**\n * add class names for a html element, when the element already has the className, skip\n * @param elem target html element\n * @param cls classNames or className\n */\nexport function addClassIfNotExist(elem: Element, cls: string[] | string): void {\n  const classes = Array.isArray(cls) ? cls : [cls];\n  for (const c of classes) {\n    if (!elem.classList.contains(c)) {\n      elem.classList.add(c);\n    }\n  }\n}\n\nexport function removeClass(elem: Element | Element[], cls: string[] | string): void {\n  const classes = Array.isArray(cls) ? cls : [cls];\n  const elements = Array.isArray(elem) ? elem : [elem];\n  for (const e of elements) {\n    for (const c of classes) {\n      e.classList.remove(c);\n    }\n  }\n}\n\n/**\n * Check if two HTML elements is Overlapping one by one\n * @param elemA first element\n * @param elemB second element\n */\nexport function ifOverlapping(elemA, elemB): boolean {\n  const rect1 = elemA.getBoundingClientRect();\n  const rect2 = elemB.getBoundingClientRect();\n  return !(\n    rect1.right < rect2.left ||\n    rect1.left > rect2.right ||\n    rect1.bottom < rect2.top ||\n    rect1.top > rect2.bottom\n  );\n}\n\nexport function setStyle(elem: HTMLElement, style: Partial<CSSStyleDeclaration>) {\n  Object.keys(style).forEach(key => {\n    elem.style[key] = style[key];\n  });\n}\n","import { ConnectorOptions, StartPositionEnum, SvgCanvasParameters } from './connector.model';\nimport { prefixCls } from './constraints';\nimport { ConnectorPoint } from './connector-point';\nimport { createPolyline, straightPolyline, addClassIfNotExist } from './utils';\n\nexport class ConnectorBase {\n  options: ConnectorOptions;\n  playground: HTMLElement;\n  startPointer: ConnectorPoint;\n  endPointer: ConnectorPoint;\n  svgElement: SVGSVGElement;\n  startElement: HTMLElement;\n  endElement: HTMLElement;\n\n  startPosition: StartPositionEnum;\n\n  // svg container parameters\n  svgParameters: SvgCanvasParameters;\n\n  /**\n   * Remove and render the svg part\n   * TODO: more efficient way should be used here\n   */\n  public renderLine() {\n    const res = this.createConnectPoint(this.startElement, this.endElement);\n    this.startPointer = res.start;\n    this.endPointer = res.end;\n    this.playground.removeChild(this.svgElement);\n    this.svgElement = this.createSvgArea();\n    this.drawEndArrow();\n    this.drawPath();\n    this.playground.appendChild(this.svgElement);\n  }\n\n  /**\n   * remove the whole svg part and the connect pointer\n   */\n  public dispose() {\n    if (this.startElement && this.startPointer) {\n      this.startElement.removeChild(this.startPointer);\n    }\n    if (this.endElement && this.endPointer) {\n      this.endElement.removeChild(this.endPointer);\n    }\n    this.playground.removeChild(this.svgElement);\n  }\n\n  /**\n   * @param playground start connector\n   * @param startElement start connector\n   * @param endElement end connector\n   * @param options end connector\n   */\n  constructor(playground: HTMLElement, startElement: HTMLElement, endElement: HTMLElement, options: ConnectorOptions) {\n    this.options = {\n      pointerSize: 4,\n      strokeWidth: 1,\n      color: '#cccccc',\n      arrowSize: 15,\n      ...options,\n    };\n    this.startElement = startElement;\n    this.endElement = endElement;\n    addClassIfNotExist(startElement, `${prefixCls}-element`);\n    addClassIfNotExist(endElement, `${prefixCls}-element`);\n    this.playground = playground;\n\n    // find the connect point that used in each element\n    const res = this.createConnectPoint(this.startElement, this.endElement);\n    this.startPointer = res.start;\n    this.endPointer = res.end;\n    addClassIfNotExist(this.startPointer, `${prefixCls}-pointer`);\n    addClassIfNotExist(this.endPointer, `${prefixCls}-pointer`);\n\n    // create a svg area between start and end\n    this.svgElement = this.createSvgArea();\n    this.drawEndArrow();\n    this.drawPath();\n    this.playground.appendChild(this.svgElement);\n  }\n\n  private createConnectPoint(startElement: HTMLElement, endElement: HTMLElement) {\n    if (!!this.startPointer) {\n      startElement.removeChild(this.startPointer);\n    }\n    if (!!this.endPointer) {\n      endElement.removeChild(this.endPointer);\n    }\n    // TBD\n    // calc the absolute distance between two elements\n    // should notice that the area depends on the endElement position related to the start element\n    // if width >>> height, use horizontal mode\n    // if height >>> width, use vertical mode\n\n    const startPointer = document.createElement('div');\n    const endPointer = document.createElement('div');\n\n    startPointer.style.position = 'absolute';\n    endPointer.style.position = 'absolute';\n    startPointer.style.backgroundColor = '#000000';\n    endPointer.style.backgroundColor = '#000000';\n    startPointer.style.width = `${this.options.pointerSize}px`;\n    endPointer.style.width = `${this.options.pointerSize}px`;\n    startPointer.style.height = `${this.options.pointerSize}px`;\n    endPointer.style.height = `${this.options.pointerSize}px`;\n\n    const xDistance = startElement.offsetLeft - endElement.offsetLeft;\n    const yDistance = startElement.offsetTop - endElement.offsetTop;\n\n    if (Math.abs(xDistance) >= Math.abs(yDistance)) {\n      if (xDistance <= 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.horizontalLeftTop;\n      } else if (xDistance <= 0 && yDistance > 0) {\n        this.startPosition = StartPositionEnum.horizontalLeftBottom;\n      } else if (xDistance > 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.horizontalRightTop;\n      } else {\n        this.startPosition = StartPositionEnum.horizontalRightBottom;\n      }\n    } else {\n      if (xDistance <= 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.verticalLeftTop;\n      } else if (xDistance <= 0 && yDistance > 0) {\n        this.startPosition = StartPositionEnum.verticalLeftBottom;\n      } else if (xDistance > 0 && yDistance <= 0) {\n        this.startPosition = StartPositionEnum.verticalRightTop;\n      } else {\n        this.startPosition = StartPositionEnum.verticalRightBottom;\n      }\n    }\n\n    switch (this.startPosition) {\n      case StartPositionEnum.horizontalLeftTop:\n      case StartPositionEnum.horizontalLeftBottom:\n        ((startPointer as unknown) as ConnectorPoint).position = 'right';\n        ((endPointer as unknown) as ConnectorPoint).position = 'left';\n        startPointer.style.left = `${startElement.getBoundingClientRect().width}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.left = `${-this.options.pointerSize}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n      case StartPositionEnum.horizontalRightTop:\n        ((startPointer as unknown) as ConnectorPoint).position = 'left';\n        ((endPointer as unknown) as ConnectorPoint).position = 'right';\n        startPointer.style.left = `${-this.options.pointerSize}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height / 2 - this.options.pointerSize / 2}px`;\n        break;\n      case StartPositionEnum.verticalLeftTop:\n      case StartPositionEnum.verticalRightTop:\n        // startElem -> bottom\n        // endElem   -> top\n        ((startPointer as unknown) as ConnectorPoint).position = 'bottom';\n        ((endPointer as unknown) as ConnectorPoint).position = 'top';\n        startPointer.style.left = `${startElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        startPointer.style.top = `${startElement.getBoundingClientRect().height}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.top = `${-this.options.pointerSize}px`;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n      case StartPositionEnum.verticalRightBottom:\n        // startElem -> top\n        // endElem   -> bottom\n        ((startPointer as unknown) as ConnectorPoint).position = 'top';\n        ((endPointer as unknown) as ConnectorPoint).position = 'bottom';\n        startPointer.style.left = `${startElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        startPointer.style.top = `-${this.options.pointerSize}px`;\n        endPointer.style.left = `${endElement.getBoundingClientRect().width / 2 - this.options.pointerSize / 2}px`;\n        endPointer.style.top = `${endElement.getBoundingClientRect().height}px`;\n        break;\n    }\n\n    startElement.appendChild(startPointer);\n    endElement.appendChild(endPointer);\n    return {\n      start: (startPointer as unknown) as ConnectorPoint,\n      end: (endPointer as unknown) as ConnectorPoint,\n    };\n  }\n\n  getTotalOffset(pointer: ConnectorPoint) {\n    const offsetLeft = pointer.offsetLeft + (pointer.offsetParent as HTMLElement).offsetLeft;\n    const offsetTop = pointer.offsetTop + (pointer.offsetParent as HTMLElement).offsetTop;\n    return {\n      offsetLeft,\n      offsetTop,\n    };\n  }\n\n  /**\n   * Create a svg area used for the connection line between the start and end point\n   * the area is rect\n   */\n  private createSvgArea() {\n    const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgElement.innerHTML = `\n    <defs>\n      <marker id=\"markerEndArrow\" viewBox=\"0 0 30 30\" refX=\"9\" refY=\"3\"  markerUnits=\"strokeWidth\" markerWidth=\"30\" markerHeight=\"30\" orient=\"auto\">\n        <path style=\"fill:${this.options.color};opacity:1\" d=\"M0,0 0,6 9,3z\" />\n      </marker>\n    </defs>`;\n    // set svg position\n    // use position attribute to handle with ethe position\n    svgElement.style.position = 'absolute';\n    svgElement.style.zIndex = '-999';\n    svgElement.style.overflow = 'visible';\n\n    const { offsetLeft: startOffsetLeft, offsetTop: startOffsetTop } = this.getTotalOffset(this.startPointer);\n    const { offsetLeft: endOffsetLeft, offsetTop: endOffsetTop } = this.getTotalOffset(this.endPointer);\n\n    switch (this.startPosition) {\n      case StartPositionEnum.horizontalLeftTop:\n      case StartPositionEnum.verticalLeftTop:\n        svgElement.style.left = `${startOffsetLeft}px`;\n        svgElement.style.top = `${startOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalRightTop:\n      case StartPositionEnum.verticalRightTop:\n        svgElement.style.left = `${endOffsetLeft}px`;\n        svgElement.style.top = `${startOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n      case StartPositionEnum.verticalLeftBottom:\n        svgElement.style.left = `${startOffsetLeft}px`;\n        svgElement.style.top = `${endOffsetTop}px`;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n      case StartPositionEnum.verticalRightBottom:\n        svgElement.style.left = `${endOffsetLeft}px`;\n        svgElement.style.top = `${endOffsetTop}px`;\n        break;\n    }\n\n    const width = Math.abs(startOffsetLeft - endOffsetLeft) + this.options.pointerSize;\n    const height = Math.abs(startOffsetTop - endOffsetTop) + this.options.pointerSize;\n    svgElement.setAttribute('width', `${width}px`);\n    svgElement.setAttribute('height', `${height}px`);\n\n    const svgWidth: number = svgElement.width.baseVal.valueInSpecifiedUnits;\n    const svgHeight: number = svgElement.height.baseVal.valueInSpecifiedUnits;\n\n    this.svgParameters = {\n      height: svgHeight,\n      width: svgWidth,\n      leftTop: [this.options.pointerSize / 2, this.options.pointerSize / 2],\n      leftBottom: [this.options.pointerSize / 2, svgHeight - this.options.pointerSize / 2],\n      rightTop: [svgWidth - this.options.pointerSize / 2, this.options.pointerSize / 2],\n      rightBottom: [svgWidth - this.options.pointerSize / 2, svgHeight - this.options.pointerSize / 2],\n    };\n    return svgElement;\n  }\n\n  /**\n   * draw a arrow in the end point position\n   */\n  drawEndArrow() {\n    console.log('base draw end point');\n  }\n\n  drawPath() {\n    let startCoordinate;\n    let endCoordinate;\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n      case StartPositionEnum.horizontalLeftTop:\n        // draw a line from leftTop to rightBottom\n        startCoordinate = this.svgParameters.leftTop;\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n      case StartPositionEnum.horizontalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.verticalRightTop:\n      case StartPositionEnum.horizontalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.verticalRightBottom:\n      case StartPositionEnum.horizontalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        endCoordinate = this.svgParameters.leftTop;\n        break;\n    }\n    const path = createPolyline(this.options);\n    straightPolyline(path, startCoordinate, endCoordinate);\n    path.style.markerEnd = 'url(#markerEndArrow)';\n    this.svgElement.appendChild(path);\n  }\n}\n","import { px2num, num2px } from './utils';\nimport { prefixCls } from './constraints';\nimport { DragOptions } from './connector.model';\n\ninterface Coordinate {\n  xPos: number;\n  yPos: number;\n}\n\nexport class Draggable {\n  elem: HTMLElement;\n  isDragging = false;\n  isCreatingNewConnector = false;\n  dragOptions: DragOptions;\n\n  startCoordinate: Coordinate;\n  elemStartCoordinate: Coordinate;\n\n  constructor(elem: HTMLElement, dragOptions: DragOptions) {\n    this.elem = elem;\n    this.dragOptions = dragOptions || { type: 'straight' };\n    this.makeItDraggable();\n    this.elemStartCoordinate = {\n      xPos: px2num(getComputedStyle(this.elem).left),\n      yPos: px2num(getComputedStyle(this.elem).top),\n    };\n  }\n\n  private makeItDraggable() {\n    this.elem.style.position = 'absolute';\n    this.elem.onmousedown = (event: MouseEvent) => {\n      this.startCoordinate = {\n        xPos: event.clientX,\n        yPos: event.clientY,\n      };\n      this.isDragging = true;\n\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isDragging) {\n          const _diffX = _event.clientX - this.startCoordinate.xPos;\n          const _diffY = _event.clientY - this.startCoordinate.yPos;\n          this.elem.style.left = num2px(this.elemStartCoordinate.xPos + _diffX);\n          this.elem.style.top = num2px(this.elemStartCoordinate.yPos + _diffY);\n          if (typeof this.dragOptions.onDragging === 'function') {\n            this.dragOptions.onDragging();\n          }\n        }\n      };\n\n      document.onmouseup = () => {\n        this.isDragging = false;\n        this.startCoordinate = undefined;\n        // new element position should be set\n        this.elemStartCoordinate = {\n          xPos: px2num(getComputedStyle(this.elem).left),\n          yPos: px2num(getComputedStyle(this.elem).top),\n        };\n\n        document.onmousemove = () => {};\n      };\n    };\n  }\n}\n","import { ConnectorOptions, StartPositionEnum, DrawPath, DrawEndArrow } from './connector.model';\nimport { ConnectorBase } from './connector-base';\nimport { createPolyline, stateMachinePolyLine, createSvgElement } from './utils';\n\nexport class ConnectorFlowchart extends ConnectorBase implements DrawPath, DrawEndArrow {\n  constructor(playground: HTMLElement, startPoint: HTMLElement, endPoint: HTMLElement, options: ConnectorOptions) {\n    super(playground, startPoint, endPoint, options);\n  }\n\n  drawEndArrow() {\n    // half of the arrow's deg, described in radius value\n    const arrowDeg = (45 / 360) * Math.PI;\n\n    const { leftTop, leftBottom, rightTop, rightBottom } = this.svgParameters;\n    const { arrowSize, color } = this.options;\n\n    const arrowPath = createSvgElement('path', {\n      fill: color,\n    });\n    const verticalHandler = (positionValue, factor: 1 | -1) => {\n      arrowPath.setAttributeNS(\n        null,\n        'd',\n        `\n          M${positionValue[0]} ${positionValue[1]}\n          L${positionValue[0] + factor * arrowSize * Math.sin(arrowDeg)}\n           ${positionValue[1] - factor * arrowSize * Math.cos(arrowDeg)}\n          L${positionValue[0]} ${positionValue[1] - factor * arrowSize * 0.6}\n          L${positionValue[0] - factor * arrowSize * Math.sin(arrowDeg)}\n           ${positionValue[1] - factor * arrowSize * Math.cos(arrowDeg)}\n          Z\n        `,\n      );\n    };\n    const horizontalHandler = (positionValue, factor: 1 | -1) => {\n      arrowPath.setAttributeNS(\n        null,\n        'd',\n        `\n          M${positionValue[0]} ${positionValue[1]}\n          L${positionValue[0] - factor * arrowSize * Math.cos(arrowDeg)} ${positionValue[1] +\n          factor * arrowSize * Math.sin(arrowDeg)}\n          L${positionValue[0] - factor * arrowSize * 0.6} ${positionValue[1]}\n          L${positionValue[0] - factor * arrowSize * Math.cos(arrowDeg)} ${positionValue[1] -\n          factor * arrowSize * Math.sin(arrowDeg)}\n          Z\n        `,\n      );\n    };\n\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n        verticalHandler(rightBottom, 1);\n        break;\n      case StartPositionEnum.horizontalLeftTop:\n        horizontalHandler(rightBottom, 1);\n        break;\n      case StartPositionEnum.verticalRightTop:\n        verticalHandler(leftBottom, 1);\n        break;\n      case StartPositionEnum.horizontalRightTop:\n        horizontalHandler(leftBottom, -1);\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n        verticalHandler(rightTop, -1);\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n        horizontalHandler(rightTop, 1);\n        break;\n      case StartPositionEnum.verticalRightBottom:\n        verticalHandler(leftTop, -1);\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n        horizontalHandler(leftTop, -1);\n        break;\n    }\n    this.svgElement.appendChild(arrowPath);\n  }\n\n  drawPath() {\n    const svgWidth: number = this.svgElement.width.baseVal.valueInSpecifiedUnits;\n    const svgHeight: number = this.svgElement.height.baseVal.valueInSpecifiedUnits;\n    let startCoordinate;\n    let middleACoordinate;\n    let middleBCoordinate;\n    let endCoordinate;\n    switch (this.startPosition) {\n      case StartPositionEnum.verticalLeftTop:\n        startCoordinate = this.svgParameters.leftTop;\n        middleACoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.horizontalLeftTop:\n        startCoordinate = this.svgParameters.leftTop;\n        middleACoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.rightBottom;\n        break;\n      case StartPositionEnum.verticalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        middleACoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.horizontalRightTop:\n        startCoordinate = this.svgParameters.rightTop;\n        middleACoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.leftBottom;\n        break;\n      case StartPositionEnum.verticalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        middleACoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.horizontalLeftBottom:\n        startCoordinate = this.svgParameters.leftBottom;\n        middleACoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.rightTop;\n        break;\n      case StartPositionEnum.verticalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        middleACoordinate = [svgWidth - this.options.pointerSize / 2, svgHeight / 2];\n        middleBCoordinate = [this.options.pointerSize / 2, svgHeight / 2];\n        endCoordinate = this.svgParameters.leftTop;\n        break;\n      case StartPositionEnum.horizontalRightBottom:\n        startCoordinate = this.svgParameters.rightBottom;\n        middleACoordinate = [svgWidth / 2, svgHeight - this.options.pointerSize / 2];\n        middleBCoordinate = [svgWidth / 2, this.options.pointerSize / 2];\n        endCoordinate = this.svgParameters.leftTop;\n    }\n\n    const path = createPolyline(this.options);\n    stateMachinePolyLine(path, startCoordinate, middleACoordinate, middleBCoordinate, endCoordinate);\n    this.svgElement.appendChild(path);\n  }\n}\n","import { Draggable } from './draggable';\nimport { DragOptions } from './connector.model';\nimport { prefixCls } from './constraints';\nimport { ConnectorBase } from './connector-base';\nimport { ConnectorFlowchart } from './connector-flowchart';\nimport { addClassIfNotExist, ifOverlapping, removeClass, setStyle } from './utils';\n\nconst TYPE_MAP = {\n  undefined: ConnectorBase,\n  straight: ConnectorBase,\n  flowchart: ConnectorFlowchart,\n};\n\nexport class Connectable extends Draggable {\n  playground: HTMLElement;\n  nativeElement: HTMLElement;\n  helperPointer: HTMLElement;\n  onCreatingLine;\n  constructor(playground: HTMLElement, elem: HTMLElement, dragOptions: DragOptions, { onCreatingLine }) {\n    super(elem, dragOptions);\n    this.nativeElement = elem;\n    this.playground = playground;\n    this.onCreatingLine = onCreatingLine;\n    addClassIfNotExist(elem, `${prefixCls}-element`);\n    this.createAnchor();\n  }\n\n  private createAnchor() {\n    const anchor: HTMLElement = document.createElement('div');\n    anchor.classList.add(`${prefixCls}-anchor`);\n    setStyle(anchor, {\n      width: '10px',\n      height: '10px',\n      backgroundColor: 'red',\n      position: 'absolute',\n      left: '15px',\n      top: '15px',\n    });\n\n    // while anchor press down\n    // a new connection will be created\n    anchor.onmousedown = (event: MouseEvent) => {\n      event.stopPropagation();\n      this.isCreatingNewConnector = true;\n\n      // create a overlay entPointer at the click position\n\n      // if offset is 0, the pointer will always hover the helper point instead of the other element\n      const helperPointOffset = 3;\n\n      const x: number = event.pageX - this.playground.offsetLeft;\n      const y: number = event.pageY - this.playground.offsetTop;\n      this.helperPointer = document.createElement('div');\n      setStyle(this.helperPointer, {\n        width: '0px',\n        height: '0px',\n        position: 'absolute',\n        left: `${x - helperPointOffset}px`,\n        top: `${y - helperPointOffset}px`,\n      });\n      this.playground.appendChild(this.helperPointer);\n      let _newConnection = new TYPE_MAP[this.dragOptions.type](this.playground, this.elem, this.helperPointer, this.dragOptions);\n\n      // TODO: onmousemove and onmouseup's listener should be removed after onmouseup\n      document.onmousemove = (_event: MouseEvent) => {\n        if (this.isCreatingNewConnector) {\n          this.helperPointer.style.left = `${_event.pageX - this.playground.offsetLeft - helperPointOffset}px`;\n          this.helperPointer.style.top = `${_event.pageY - this.playground.offsetTop - helperPointOffset}px`;\n          if (_newConnection) {\n            _newConnection.renderLine();\n          }\n          const elementMouseIsOver = document.elementsFromPoint(_event.clientX, _event.clientY);\n          const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n\n          const allElements = this.playground.getElementsByClassName(`${prefixCls}-element`);\n          if (targetElements.length > 0) {\n            addClassIfNotExist(targetElements[0], `${prefixCls}-will`);\n            // others should be deleted\n            removeClass(Array.from(allElements).filter(i => i !== targetElements[0]), `${prefixCls}-will`);\n          } else {\n            removeClass(Array.from(allElements), `${prefixCls}-will`);\n          }\n        }\n      };\n      document.onmouseup = (_upEvent: MouseEvent) => {\n        this.isCreatingNewConnector = false;\n        const elementMouseIsOver = document.elementsFromPoint(_upEvent.clientX, _upEvent.clientY);\n        const targetElements = elementMouseIsOver.filter(i => i.classList.contains('cnt-element'));\n        if (_newConnection) {\n          _newConnection.dispose();\n          _newConnection = null;\n        }\n        if (targetElements.length > 0) {\n          this.onCreatingLine(targetElements[0]);\n          removeClass(targetElements[0], `${prefixCls}-will`);\n        }\n        if (this.helperPointer) {\n          this.playground.removeChild(this.helperPointer);\n          this.helperPointer = undefined;\n        }\n      };\n    };\n\n    this.elem.appendChild(anchor);\n  }\n}\n","import { DomConnection, EasyConnectionOptions } from './connector.model';\nimport { ConnectorBase } from './connector-base';\nimport { Connectable } from './connectable';\nimport { ConnectorFlowchart } from './connector-flowchart';\nimport { ifOverlapping } from './utils';\n\ninterface ElementConnectionsMap {\n  [a: string]: Array<ConnectorBase>;\n}\n\nconst TYPE_MAP = {\n  undefined: ConnectorBase,\n  straight: ConnectorBase,\n  flowchart: ConnectorFlowchart,\n};\n\nexport class EasyConnection {\n  playground: HTMLElement;\n  options: EasyConnectionOptions;\n  connectableElements: Connectable[] = [];\n  connections: ConnectorBase[] = [];\n\n  elementConnectionsMap: ElementConnectionsMap = {};\n\n  constructor(\n    playground: HTMLElement,\n    elements: HTMLElement[] = [],\n    connections: DomConnection[] = [],\n    options: EasyConnectionOptions = { type: 'straight' },\n  ) {\n    this.playground = playground;\n    this.options = options;\n    // set the playground to position relative\n    // init the connections\n    for (const elem of elements) {\n      this.elementConnectionsMap[elem.id] = [];\n    }\n    for (const con of connections) {\n      const connectionInstance = new TYPE_MAP[options.type](playground, con.start, con.end, options);\n      this.elementConnectionsMap[con.start.id].push(connectionInstance);\n      this.elementConnectionsMap[con.end.id].push(connectionInstance);\n      this.connections.push(connectionInstance);\n    }\n    for (const elem of elements) {\n      this.connectableElements.push(\n        new Connectable(\n          playground,\n          elem,\n          {\n            ...options,\n            onDragging: () => {\n              // all lines connected to this element should be reRendered\n              this.elementConnectionsMap[elem.id].forEach(i => i.renderLine());\n            },\n          },\n          {\n            onCreatingLine: (targetElem: HTMLElement) => {\n              this.addConnection({\n                start: elem,\n                end: targetElem,\n              });\n            },\n          },\n        ),\n      );\n    }\n  }\n\n  addElement(elem: HTMLElement): void {\n    this.elementConnectionsMap[elem.id] = [];\n    this.playground.appendChild(elem);\n    this.connectableElements.push(\n      new Connectable(\n        this.playground,\n        elem,\n        {\n          ...this.options,\n          onDragging: () => {\n            // all lines connected to this element should be reRendered\n            this.elementConnectionsMap[elem.id].forEach(i => i.renderLine());\n          },\n        },\n        {\n          onCreatingLine: (targetElem: HTMLElement) => {\n            this.addConnection({\n              start: elem,\n              end: targetElem,\n            });\n          },\n        },\n      ),\n    );\n  }\n  addConnection(connection: DomConnection): void {\n    const connectionInstance = new TYPE_MAP[this.options.type](\n      this.playground,\n      connection.start,\n      connection.end,\n      this.options,\n    );\n    this.elementConnectionsMap[connection.start.id].push(connectionInstance);\n    this.elementConnectionsMap[connection.end.id].push(connectionInstance);\n    this.connections.push(connectionInstance);\n  }\n}\n"],"names":["StartPositionEnum","prefixCls","createSvgElement","label","styleMap","elem","document","createElementNS","Object","keys","forEach","key","setAttributeNS","createPolyline","options","polyline","color","strokeWidth","straightPolyline","polyLine","start","end","toString","stateMachinePolyLine","midA","midB","px2num","pxVal","slice","length","num2px","numVal","addClassIfNotExist","cls","classes","Array","isArray","c","classList","contains","add","removeClass","elements","e","remove","setStyle","style","ConnectorBase","res","createConnectPoint","startElement","endElement","startPointer","endPointer","playground","removeChild","svgElement","createSvgArea","drawEndArrow","drawPath","appendChild","pointerSize","arrowSize","createElement","position","backgroundColor","width","height","xDistance","offsetLeft","yDistance","offsetTop","Math","abs","startPosition","horizontalLeftTop","horizontalLeftBottom","horizontalRightTop","horizontalRightBottom","verticalLeftTop","verticalLeftBottom","verticalRightTop","verticalRightBottom","left","getBoundingClientRect","top","pointer","offsetParent","innerHTML","zIndex","overflow","getTotalOffset","startOffsetLeft","startOffsetTop","endOffsetLeft","endOffsetTop","setAttribute","svgWidth","baseVal","valueInSpecifiedUnits","svgHeight","svgParameters","leftTop","leftBottom","rightTop","rightBottom","console","log","startCoordinate","endCoordinate","path","markerEnd","Draggable","dragOptions","isDragging","isCreatingNewConnector","type","makeItDraggable","elemStartCoordinate","xPos","getComputedStyle","yPos","onmousedown","event","clientX","clientY","onmousemove","_event","_diffX","_diffY","onDragging","onmouseup","undefined","ConnectorFlowchart","startPoint","endPoint","arrowDeg","PI","arrowPath","fill","verticalHandler","positionValue","factor","sin","cos","horizontalHandler","middleACoordinate","middleBCoordinate","TYPE_MAP","straight","flowchart","Connectable","onCreatingLine","nativeElement","createAnchor","anchor","stopPropagation","helperPointOffset","x","pageX","y","pageY","helperPointer","_newConnection","renderLine","elementMouseIsOver","elementsFromPoint","targetElements","filter","i","allElements","getElementsByClassName","from","_upEvent","dispose","EasyConnection","connections","connectableElements","elementConnectionsMap","id","con","connectionInstance","push","targetElem","addConnection","connection"],"mappings":"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"}